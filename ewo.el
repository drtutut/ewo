;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Easy Website with Org (EWO) project
;;;
;;; Generates a site organized in categories. Relies on the bootstrap
;;; framework by default but this can be customized.
;;;
;;; There is only one category level.
;;; There are two kinds of categories :
;;;
;;; static categories
;;; -----------------
;;;
;;; the category correspond to one page (index.org) in the category
;;; directory. The content of this page is entirely user-defined. The
;;; blogging system only task is to generate navigation links.
;;;
;;; In order to create a static category, set the `:type' attribute to
;;; `static'.
;;;
;;; blogging categories 
;;; -------------------
;;;
;;; [NOT IMPLEMENTED YET]
;;;
;;; TODO: to be worked out and redifined. Not implemented.
;;;
;;; The category correspond to one page (`index.org') in the category
;;; directory. The resulting `index.html' page is automagically
;;; generated by the system. It present the various articles published
;;; in the category. Several sorting options are considered : by date
;;; ou by tag.  Each article is a section in the `index.org' file. An
;;; article is generated if the section is a `DONE' entry (that is,
;;; `TODO' entries are articles in a writing process). data associated
;;; to a blog entry which is taken into account by the system is :
;;; 
;;; - The CLOSED property, which is used as the publication date
;;; - tags : are collected in order to propose a tag cloud.
;;; 
;;; In order to create a blogging category, set the `:type' attribute
;;; to `blog'.
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'ewo)
(require 'org)
(require 'ox)
(require 'ox-publish)

(defvar ewo-name "EWO")
(defvar ewo-root-dir "~/Documents/www/MonSite/org")
(defvar ewo-publish-dir "~/public_html")
(defvar ewo-categories
  '(("teaching"
     :label "Teaching"
     :directory "Teaching"
     :icon "education"
     :type static)
    ("research"
     :label "Research"
     :directory "Research"
     :icon "eye-open"
     :type static)))	       

(defvar ewo-doc-extensions "pdf\\|doc\\|odt\\|ods\\|odp\\|odg\\|tar.gz\\|tgz\\|tar.bz2\\|zip"
  "Allowed extensions for documents")

(defun ewo-get-cat-prop (cat prop)
  "Gets the property of a category"
  (plist-get (cdr (assoc cat ewo-categories)) prop)) 

(defun ewo-cat-names (cats)
  "Returns category names list out of categories alist"
  (if (not (consp cats))
      '()
    (cons (car (car cats))
	  (ewo-cat-names (cdr cats)))))

;; entête de page de l'accueil
(defvar ewo-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"css/mytypo.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>"
"entête de la page d'accueil")

;; entête de page des catégories
(defvar ewo-cat-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/mytypo.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>"
"entête des pages des catégories")

;; Builds the navigation links to the categories. `catlist' is the
;; list of categories, `catname' is the name of the current category,
;; or `nil' if we are at site home. 
(defun ewo-categories-nav (curcat catlist)
  (if (not (consp catlist))
      '()
    (let ((catname 	(car (car catlist)))
	  (pl 		(cdr (car catlist))))
      (concat
       (make-string 10 ?\s)
       "<li" 
       (if (string-equal curcat catname)
	   " class=\"active\"" "")
       "><a href=\"" 
       (if curcat "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") 
       (plist-get pl :directory) "\">"
       (if (plist-get pl :icon) 
	   (concat "<span class=\"glyphicon glyphicon-" (plist-get pl :icon) "\" aria-hidden=\"true\"></span> ")
	 "")
       (plist-get pl :label) "</a></li>\n"
       (ewo-categories-nav curcat (cdr catlist))))))

(defun ewo-rootlink (level)
  "Generates an up link to root depending on LEVEL"
  (if (= level 0)
      ""
    (concat "../" (ewo-rootlink (- level 1)))))

(defvar ewo-navbar-class "navbar navbar-inverse navbar-fixed-top")

;; Builds the navigation)
;; if `iscategory' is true, it means that we are in a category page,
;; otherwise we are at the root of the website. `catname' is the category name
(defun ewo-html-nav (catname)
  (concat 
   "<header>
  <nav class=\"" ewo-navbar-class "\">
    <div class=\"container\">
      <div class=\"navbar-header\">
        <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">
          <span class=\"sr-only\">Toggle navigation</span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
        </button>
        <a class=\"navbar-brand\" href=\"" (if catname "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") "\">" ewo-name "</a>
      </div>
      <div id=\"navbar\" class=\"navbar-collapse collapse\">
        <ul class=\"nav navbar-nav\">
          <li" (if (not catname) " class=\"active\"" "") "><a href=\"" (if catname "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") "\"><span class=\"glyphicon glyphicon-home\" aria-hidden=\"true\"></span> Accueil</a></li>\n" 
	  (ewo-categories-nav catname ewo-categories)
"        </ul>
      </div> <!-- navbar-collapse -->
    </div> <!-- container-fluid -->
  </nav>
</header>"))

(defvar ewo-html-postamble 
  "<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>js/bootstrap.min.js\"></script>")

;; génère les propriétés de publication d'une catégorie
(defun ewo-cat-props (cat)
"Generates the publication properties for a category CAT."
  (let* ((name  (car cat))
	 (props (cdr cat))
	 (label (plist-get props :label))
	 (dir   (plist-get props :directory)))
    (list
     name
     :base-directory (concat ewo-root-dir "/" dir)
     :base-extension "org"
     :exclude "^\\(.*~\\|^.#.*\\)$"
     :publishing-directory (concat ewo-publish-dir "/" dir)
     :publishing-function 'org-html-publish-to-html
     :recursive t
     :headline-levels 3
     :style-include-default: nil
     :section-numbers nil
     :table-of-contents nil
     :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
     :html-head ewo-cat-html-head
     :html-preamble (ewo-html-nav name)
     :html-postamble ewo-html-postamble)))



;; génère la liste de publication du projet pour les catégories 
(defun ewo-cat-project-alist (catlist)
  "Generates the publication association list for the different
categories. This list respects the format of
`org-publish-projetct-alist'.

CATLIST is the list of categories."
  (if (not (consp catlist))
      '()
    (cons
     (ewo-cat-props (car catlist))
     (ewo-cat-project-alist (cdr catlist)))))


(defun ewo-gen-project-alist ()
  "Progect alist regeneration. Must be called after any preamble content
modification, e.g. if you tweak these parameters in your
.emacs)."
  (setq org-publish-project-alist
	(append
	 (list
	  (list
	   "orgfiles"
	   :base-directory ewo-root-dir
	   :base-extension "org"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory ewo-publish-dir
	   :publishing-function 'org-html-publish-to-html
	   :headline-levels 3
	   :style-include-default: nil
	   :section-numbers nil
	   :table-of-contents nil
	   :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
	   :html-head ewo-html-head
	   :html-preamble (ewo-html-nav nil)
	   :html-postamble ewo-html-postamble))
	 (ewo-cat-project-alist ewo-categories)
	 (list
	  (list
	   "images"
	   :base-directory (concat ewo-root-dir "/images")
	   :base-extension "jpg\\|gif\\|png"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat ewo-publish-dir "/images")
	   :publishing-function 'org-publish-attachment)
	  
	  (list 
	   "css"
	   :base-directory (concat ewo-root-dir "/css")
	   :base-extension "css\\|map"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat ewo-publish-dir "/css")
	   :publishing-function 'org-publish-attachment)
	  
	  (list
	   "js"
	   :base-directory (concat ewo-root-dir "/js")
	   :base-extension "js"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat ewo-publish-dir "/js")
	   :publishing-function 'org-publish-attachment)

	  (list
	   "documents"
	   :base-directory (concat ewo-root-dir "/documents")
	   :base-extension ewo-doc-extensions
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat ewo-publish-dir "/js")
	   :publishing-function 'org-publish-attachment)
	  
	  (list
	   "fonts"
	   :base-directory (concat ewo-root-dir "/fonts")
	   :base-extension "woff2\\|woff\\|ttf\\|svg\\|eot"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat ewo-publish-dir "/fonts")
	   :publishing-function 'org-publish-attachment)

	  `("website" :components ,(append 
				    '("orgfiles" "images" "css" "js" "fonts" "documents")
				    (ewo-cat-names ewo-categories)))))))

;; call project alist generation function immediately !
(ewo-gen-project-alist)

;; main entry point ! 
;;;###autoload
(defun ewo-publish ()
  "Publish the currently defined website."
  (interactive)
  (ewo-gen-project-alist)
  (org-publish "website"))
  

  
(defun ewo-int-getlevel (cattree pos)
  "Gets the category level given a category tree."
  (if (string-match "/" cattree pos)
      (+ 1 (ewo-int-getlevel cattree (+ pos (match-end 0))))
    0))

(defun ewo-get-level (filename)
  "Get file level from root"
  (let* ((full-root (expand-file-name ewo-root-dir))
	 (regex (concat full-root  
			"\\(\\(/[-_a-zA-Z0-9]+\\)+\\)?/[-_a-zA-Z0-9]+\\.org")))
    (if (string-match regex filename)
	(if (not (match-string 1 filename))
	    ;; at root ! (no subexpression match)
	    0
	  (ewo-int-getlevel 
	   (substring filename (match-beginning 1) (match-end 1)) 0))
      nil)))
	 
(defvar ewo-template-funcs '(ewo-rootlink)
  "safe functions usable in templates.")
(defvar ewo-template-vars '(ewo:catlevel)
  "variables usable in templates.")

(defun ewo-secure-formp (form)
  "Check if FORM is safe."
  (let ((func (car form)))
    (when (memq func ewo-template-funcs)
      (ewo-secure-argsp (cdr form)))))

(defun ewo-secure-argsp (args)
  "Check if the ARGS of a function call are safe."  
  (if (null args)
      t
    (when (memq (car args) ewo-template-vars)
      (ewo-secure-argsp (cdr args)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; filter system : allows the execution of lisp formulae included in
;; <lisp></lisp> constructs.

  
(defun ewo-filter-prepost (fstring backend channel)
  "An HTML filter which execute lisp functions included in <lisp>...</lisp> constructs.
Only allowed functions with allowed args is possible, and args
must be in a list of allowed variables."
  (when (eq backend 'html)
    ;; build the environment of the function calls (i.e. variables available to the user in templates
    (princ (format "post-processing file \"%s\"\n"  (plist-get channel :input-file)))
    (let ((ewo:catlevel (ewo-get-level (plist-get channel :input-file)))
	  (search-start nil))
      (while (string-match "<lisp>\\(.+?\\)</lisp>" fstring search-start)
	(let* ((start (match-beginning 1))
	       (end   (match-end 1))
	       (strform (substring fstring start end))
	       (form (read strform)))
	  (princ (format "===== lisp exp is \"%s\"\n" strform))
	  (if (ewo-secure-formp form)
	      (let ((result (eval form)))
		(setq fstring (concat
			       (substring fstring 0 (- start 6)) ; jq avant <lisp>
			       result
			       (substring fstring (+ end 7) nil)))) ; on commence après </lisp>
	    (error "unsecure or malformed expression : %s" strform))
	  (setq search-start end)))))
  fstring)


;;  Register filter function
(setq org-export-filter-final-output-functions
      '(ewo-filter-prepost))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; body filter : encapsulate body in a <div class="container">.

(defun ewo-filter-body (fstring backend channel)
  ;; (princ (format "body is \"%s\"\n" fstring))
  (if (eq backend 'html)
    (concat 
     "<div class=\"container\">\n"
     fstring
     "</div> <!-- class container -->\n")
    fstring))

(setq org-export-filter-body-functions
      '(ewo-filter-body))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Header filter

;;; TODO : Modularize this ! 
(defun ewo-filter-headline (fstring backend channel)
  "Surround h[2-5] headers with div class panel-header, and add class
panel-body to de div class outline-text-[2-5]. Do this only if
containing outline div is of class panel. 

Second task is to surround sections with published
BOOSTRAP_COLUMN property with a div with the corresponding
class."
  (when (not (eq backend 'html)) fstring) 
  ;; (princ "*************************************************************************\n")
  ;; (princ (format "head : \"%s\"\n\n" fstring))
  ;; (princ (format "channel : %s\n\n" channel))
  (let ((re "^\\(<div.+class=\"outline-[2-5].+panel.+\">[[:space:]]*\n\\)\\(<h[2-5].+>.+</h[2-5]>[[:space:]]*\n\\)\\(\\(.\\|\n\\)+</div>\\)\\(\n*\\)$"))
    (when (string-match re fstring)
      (let ((start-outline-2 (match-beginning 1))
	    (end-outline-2 (match-end 1))
	    (start-h2 (match-beginning 2))
	    (end-h2 (match-end 2))
	    (start-div-body (match-beginning 3))
	    (end-div-body (match-end 3))
	    (start-tail (match-beginning 5))
	    (end-tail (match-end 5)))
	(setq fstring (concat
		       (substring fstring start-outline-2 end-outline-2)
		       "<div class=\"panel-heading\">\n"
		       (let ((h2 (substring fstring start-h2 end-h2)))
			 (if (string-match "^\\(.+class=\".+\\)\\(\".+\\)$" h2)
			     (let ((pre (match-string 1 h2))
				   (post (match-string 2 h2)))
			       (concat pre " panel-title" post))
			   (if (string-match "^\\(<h[2-5].+\\)\\(>.+$\\)" h2) ; should match
			       (let ((pre (match-string 1 h2))
				     (post (match-string 2 h2)))
				 (concat pre " class=\"panel-title\"" post))
			     (substring fstring start-h2 end-h2))))
		       "</div>\n"
		       "<div class=\"panel-body\">\n"
		       (substring fstring start-div-body end-div-body)
		       "\n</div>\n"
		       (substring fstring start-tail nil))))))
  ;; now check if properties regarding bootstrap rows and columns have
  ;; been set. Add divs accordingly. This is soooo weird (because it
  ;; relies on filter application order)....

  (when ewo-bootstrap-column
    (setq fstring (concat
		   "<div class=\"" ewo-bootstrap-column "\">\n"
		   fstring
		   "</div> <!-- bootstrap column -->\n"))
    (setq ewo-bootstrap-column nil))
  (when ewo-bootstrap-row-begin
    (setq fstring (concat 
		   "<div class=\"row\">\n"
		   fstring))
    (setq ewo-bootstrap-row-begin nil))
  (when ewo-bootstrap-row-end
    (setq fstring (concat 
		   fstring
		   "</div>\n"))
    (setq ewo-bootstrap-row-end nil))
  
  fstring)

(setq org-export-filter-headline-functions 
      '(ewo-filter-headline))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawer filter

(defvar ewo-bootstrap-column nil)
(defvar ewo-bootstrap-row-begin nil)
(defvar ewo-bootstrap-row-end nil)

;; careful : relies on the fact that this filter will be applied before
;; headline filter  (`ewo-filter-headline').
(defun ewo-filter-drawer (fstring backend channel)
  "Extract information from BOOTSTRAP_COLUMN, BOOTSTRAP_ROW_BEGIN
and BOOTSTRAP_ROW_END properties. This information will be used
by the headline filter `ewo-filter-headline'."
  (when (not (eq backend 'html)) nil)
  ;; (princ (format "drawer : \"%s\"\n" fstring))
  (when (string-match "^BOOTSTRAP_COLUMN:[[:space:]]+\\(.+\\)[[:space:]]*$" fstring)
    ;; (princ "COLUMN OK !!!!!!!!!!!!!!!!!\n")
    (setq ewo-bootstrap-column (match-string 1 fstring)))
  (when (string-match "^BOOTSTRAP_ROW_BEGIN:[[:space:]]+.+[[:space:]]*$" fstring)
    ;; (princ "ROW BEGIN OK !!!!!!!!!!!!!!!!!\n")
    (setq ewo-bootstrap-row-begin t))
  (when (string-match "^BOOTSTRAP_ROW_END:[[:space:]]+.+[[:space:]]*$" fstring)
    ;; (princ "ROW END OK !!!!!!!!!!!!!!!!!\n")
    (setq ewo-bootstrap-row-end t))
  ;; return a newline because filter system doesn't like empty strings
  "\n")

(setq org-export-filter-property-drawer-functions
      '(ewo-filter-drawer))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; section filter

(defun ewo-filter-section (fstring backend channel)
  (when (not (eq backend 'html)) nil)
  (princ (format "section : \"%s\"\n" fstring)))

(setq org-export-filter-section-functions
      '())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 
;;; initialisation code

(define-key org-mode-map (kbd "C-c C-=") 'ewo-publish)
