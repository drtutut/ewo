#+TITLE: EWO (Easy Website with Org)

* Introduction

  EWO is an extension to the org HTML publishing mechanism. It allows
  to define a simple static web site based on /categories/. 

  Namely, a category is a directory in the web site tree. This allows
  the automatic generation of a navigation bar.

  EWO relies on the [[http://getbootstrap.com/][boostrap]] framework.

* Defining an EWO project
  :PROPERTIES:
  :CUSTOM_ID: DefEWOProject
  :END:

  Contrary to the org HTML publishing mechanism, in order to define an
  EWO project, you do not need to configure the
  =org-publish-project-alist= variable. EWO will generate
  automatically this list based on your definition of the categories.

  We now present the different variables which are used to define an
  EWO project.

** variable =ewo-name=

   This variable contains a string which defines the name of your website. 

** variable =ewo-root-dir=

   This variable contains the full path of the directory containing
   the org files containing the pages of your future site, along with
   the auxiliary files like css stylesheets, javascript files, images
   ...

** variable =ewo-publish-dir=

   This variable contains the full path where your project will be
   exported in its html form. It can be a path on the local machine,
   but also a tramp-like pathname defining a path on a remote machine[fn:1].

** variable =ewo-categories=

   This variable contains an alist describing the categories of your website.
   each entry of the alist contain :

   - the category id :: this is a string which acts as a category selector.
   - =:label= property :: this is a string defining the label of the
        category as it appears in the navigation bar.
   - =:directory= property :: this is a string defining the
        subdirectory containing the pages of the category.
   - =:icon= property :: this is an optionnal property giving the name
        of an icon as it is named in the glyphicon system of the
        bootstrap framework (see example below)
   - =:type= ::  this is a category type which, at the time being, has
        only one value, namely the atom =static=.

** variable =ewo-navbar-class=

   This variable is a string indicating the class of the bootstrap
   navigation bar. By default, this variable is initialized with the
   value =navbar navbar-inverse navbar-fixed-top=.

[fn:1] This feature has not been tested, please let me know if it works. 

** variable =ewo-doc-extensions=
   
   A regular expression defining the allowed extensions for the
   additionnal documents of your site, which are stored in the
   =documents= directory (see section [[#SiteStructure][Site Structure]]).
   
** Example

#+BEGIN_SRC emacs-lisp
  (defvar ewo-name "Retry/Abort")
  (defvar ewo-root-dir "~/Documents/www/MySite/org")
  (defvar ewo-publish-dir "~/public_html")
  (defvar ewo-categories
    '(("teaching"
       :label "Teaching"
       :directory "Teaching"
       :icon "education"
       :type static)
      ("research"
       :label "Research"
       :directory "Research"
       :icon "eye-open"
       :type static)))           
#+END_SRC

  This configuration defines a site whose name is "Retry/Abort", whose
  local root directory is =~/Documents/www/MySite/org= and whose
  publishing directory is =~/public_html=.

  There are two categories in this project, a teaching category and a
  research category. The teaching category will be labeled "Teaching"
  and its subdirectory will be
  =~/Documents/www/MySite/org/Teaching=. It will use the glyphicon
  =glyphicon-education= as an icon. The research category will be
  labeled "Research" and its subdirectory will be
  =~/Documents/www/MySite/org/Research=. It will use the glyphicon
  =glyphicon-eye-open= as an icon.

* Site structure 
  :PROPERTIES:
  :CUSTOM_ID: SiteStructure
  :END:

  Every EWO project has a structure similar to the following :

  #+BEGIN_EXAMPLE
  root-directory +-- Category1
                 |
		 |   ...
		 |
                 +-- CategoryN
		 |
		 +-- css
		 |
		 +-- fonts
		 |
		 +-- js
		 |
		 +-- images
		 |
		 \-- documents
  #+END_EXAMPLE

  The minimal content of these directory is defined hereafter. Note
  that the mandatory files are provided by ewo.

** the =css= directory

   Should contain at least the following files (provided that you did
   not customize the =ewo-html-head= and the =ewo-cat-html-head=, see
   below) :
   - =mytypo.css= :: Typographic definitions. Typically font definitions.
   - =bootstrap.min.css= :: Bootstrap css definitions.
   - =mystyle.css= ::  your personnal css definitions goes here.

** the =js= directory

   Should contain at least the following files (provided that you did
   not customize the =ewo-html-head= and the =ewo-cat-html-head=, see
   below) :
   - =html5shiv.min.js= :: javascript needed by bootstrap (for IE8) 
   - =respond.min.je= :: javascript needed by bootstrap (for IE8) 

** the =fonts= directory

   Should contain a minimal the glyphicons font for bootstrap.

** the =images= directory

   There are no requirements in this directory. You should put your images here.

** the =documents= directory

   There are no requirements in this directory. You should put the
   documents linked to the pages of your site here.
* Starting a fresh project

  1. Copy the content of the =www= directory in ewo to the root of your project.
  2. Define the variables of your project, as described in the section
     [[#DefEWOProject][Defining an EWO project]].
  3. The root of your website, and the root of each category *must*
     contain an =index.org= file.

* Deeper customization
** the =<lisp></lisp>= mechanism

   EWO enables the insertion of =<lisp></lisp>= constructs in your pages[fn:2].

   These constructs allows you to call lisp functions to produce a
   textual result which is then substituted to the <lisp></lisp>
   construct. Actually, you cannot execute any lisp expression,
   because it would be a *monstruous* security hole. The list
   expression should be a functionn call, and the arguments of the
   function (if any) should be variables. Moreover, the function and
   the variables must be members of /authorization lists/ :

   - =ewo-template-funcs= :: List of authorized functions for =<lisp>=
        constructs. Initially contains the =ewo-rootlink= function,
        which generates an up link to root of the site depending on
        LEVEL parameter
   - =ewo-template-vars= :: List of authorized variables for =<lisp>=
        constructs. Initially contains the variable =ewo:catlevel=,
        which contains the category level in the context of the
        call. Note that this is NOT a a global variable. Its binding
        is local to the =<lisp>= construct machinery to keep it safe.

   For now there is no clear documentation on how to extend this
   mechanism (adding functions or args). If you whish to add you own
   functions and variables, please check the =ewo-filter-prepost=
   function which implements the internal machinery of =<lisp></lisp>=
   constructs.

[fn:2] To insert these constructs in the body of you org files, you
need to enclose them in '@@html:' constructs (see HTML Export in the
org manual)

** Bootstrap panels

   There are two ways to create bootstrap panels with EWO. You can
   either include any text within a section into a panel, or turn an
   entire section (and its subsections) into a bootstrap panel.

*** Creating a panel within a section

    It suffices to enclose the paragraphs which you want to include in
    the panel in proper HTML entities using the special blocks
    mechanism. For instance:

    #+BEGIN_SRC org
    #+ATTR_HTML: :class panel-warning
    #+BEGIN_panel
    #+BEGIN_panel-heading
    Question
    #+END_panel-heading
    #+BEGIN_panel-body
    Où se trouve le fichier correspondant à la page qui est ouverte ?
    #+END_panel-body
    #+END_panel
    #+END_SRC

    This will create a warning panel, i.e. a =<div>= of class =panel
    panel-warning=.

*** Turning a subtree into a panel

    For this, just add a =HTML_CONTAINER_CLASS= property to the
    enclosing section of the subtree, as in :

    #+BEGIN_SRC org
      ,* Mise en garde, méthode !
      :PROPERTIES:
      :HTML_CONTAINER_CLASS: panel panel-danger
      :END:

      Au cours des TP, vous allez être amenés à modifier les fichiers de
      configuration existants d'Apache. Une erreur dans une ligne peut
      engendrer un dysfonctionnement du serveur. Pour éviter tout
      problème, *faites systématiquement une copie de toute ligne modifiée
      et mettez cette copie en commentaire.* En procédant de cette façon
      il est aisé de revenir dans l'état initial. Parfois, une copie de la
      section modifiée est encore plus sûr. 
    #+END_SRC

** Bootstrap rows and columns

   One of the strengths of bootsrap is its grid system which allows
   the creation of responsive pages. 

   Rows and columns can be created with EWO on a section basis, that
   is, one can encapsulate successive sections in a row, specifying
   the spanning of each section.  For this, three properties are
   used :

   - =BOOTSTRAP_COLUMN= :: Used to specify the column class of a
        section e.g. =col-md-4=.
   - =BOOTSTRAP_ROW_BEGIN= :: Used to identify the section which
        begins the row. The value doesn't care.
   - =BOOTSTRAP_ROW_END= :: Used to  identify the section which
        ends the row. The value doesn't care.


   Example :

   #+BEGIN_SRC org
     ,** Cours
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: panel panel-primary
     :BOOTSTRAP_COLUMN: col-md-4
     :BOOTSTRAP_ROW_BEGIN: t
     :END:

     Cours 1.

     ,** TD
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: panel panel-primary 
     :BOOTSTRAP_COLUMN: col-md-4
     :END:

     blahblah.

     ,** TP
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: panel panel-primary
     :BOOTSTRAP_COLUMN: col-md-4
     :BOOTSTRAP_ROW_END: t
     :END:

     blahblah.

   #+END_SRC

* Publishing the site

  To publish a site, either invoke the =ewo-publish= function, or use
  the =C-c C-== keys.
