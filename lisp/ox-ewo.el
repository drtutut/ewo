;; Copyright 2017 Éric Würbel

;; This file is part of EWO.

;; EWO is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; EWO is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with EWO.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Easy Website with Org (EWO) project
;;;
;;; Generates a site organized in categories. Relies on the bootstrap
;;; framework by default but this can be customized.
;;;
;;; There is only one category level.
;;; There are two kinds of categories :
;;;
;;; static categories
;;; -----------------
;;;
;;; the category correspond to one page (index.org) in the category
;;; directory. The content of this page is entirely user-defined. The
;;; blogging system only task is to generate navigation links.
;;;
;;; In order to create a static category, set the `:type' attribute to
;;; `static'.
;;;
;;; blogging categories 
;;; -------------------
;;;
;;; [NOT IMPLEMENTED YET]
;;;
;;; TODO: to be worked out and redefined. Not implemented.
;;;
;;; The category correspond to one page (`index.org') in the category
;;; directory. The resulting `index.html' page is automagically
;;; generated by the system. It present the various articles published
;;; in the category. Several sorting options are considered : by date
;;; ou by tag.  Each article is a section in the `index.org' file. An
;;; article is generated if the section is a `DONE' entry (that is,
;;; `TODO' entries are articles in a writing process). data associated
;;; to a blog entry which is taken into account by the system is :
;;; 
;;; - The CLOSED property, which is used as the publication date
;;; - tags : are collected in order to propose a tag cloud.
;;; 
;;; In order to create a blogging category, set the `:type' attribute
;;; to `blog'.
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'org)
(require 'ox)
(require 'ox-html)
(require 'ox-publish)

;; pas bon : ils faudrait revoir le mécanisme d'évaluation des balises
;; <lisp></lisp> pour vraiment avoir du lexical binding.
(setq lexical-binding t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Configuration variables.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defgroup ewo nil
  "Easy Websites with org mode."
  :tag "Ewo"
  :group 'org)


(defcustom ewo-name "EWO"
  "The name of the website."
  :group 'ewo
  :type 'string)

(defcustom ewo-configurations
  '(("default"
     :root-dir "~/Documents/www/MonSite/org"
     :publish-dir "~/public_html"))
  "Association list of alternative configurations for ewo. The
CAR of each element of the alist is a string, uniquely
identifying the configuration. the CDR of each element is a well
formed property list with an event number of elements,
alternating keys and values, which specifies the configuration
values. The possible configuration values are:

    `:root-dir' 

    Root directory of the org-source of the website.

    `:publish-dir'

    The publishing directory of the website."
  :group 'ewo
  :type '(alist 
	  :key-type string  
	  :value-type plist))

(defcustom ewo-categories
  '(("teaching"
     :label "Teaching"
     :directory "Teaching"
     :icon "education"
     :type static)
    ("research"
     :label "Research"
     :directory "Research"
     :icon "eye-open"
     :type static))
  "Association list of the categories defining a website project.
Each element of the alist is a category of the website. The CAR
of each element is a string, uniquely identifying the
category. The CDR of each element is a well formed property list
with an even number of elements, alternating keys and values,
specifying the parameters of the category.

  \(:property value :property value ... )

The defined properties are :

  `:label'

  The label of the category as it will appear in the navigation
  bar. This property is mandatory.

  `:directory'

  Directory containing the pages of the category. This property
  is mandatory.

  `:icon' 

  the icon name, as it is named in the glyphicon list in the
  bootstrap documentation. If the icon is named \"glyphicon
  glyphicon-plus\", then just name it \"plus\". This property is
  optional.

  `:type'

  The type of the category. For now there is just one type :
  static. This property is mandatory."
  :group 'ewo
  :type '(alist 
	  :key-type string  
	  :value-type plist))

(defcustom ewo-home-name "Home"
  "String naming the home home of the site."
  :group 'ewo
  :type 'string)

(defcustom ewo-doc-extensions "pdf\\|doc\\|odt\\|ods\\|odp\\|odg\\|tar.gz\\|tgz\\|tar.bz2\\|zip"
  "Regular expression describing allowed extensions for
additional documents in a website."
  :group 'ewo
  :type 'regexp)

(defcustom ewo-html-postamble 
  "<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>js/bootstrap.min.js\"></script>"
  "A string containing HTML code to be included in the postamble of a page."
  :group 'ewo
  :type 'string)

(defcustom ewo-html-preamble nil
  "A string containing HTML code to be included in the preamble of a page."
  :group 'ewo
  :type 'string)

(defcustom ewo-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"css/mytypo.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>"
  "A string containing the head of the home page. This code will be included in the
<head></head> section."
  :group 'ewo
  :type 'string)

(defcustom ewo-cat-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/mytypo.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>"
  "A string containing the head of the pages contained in a category.  This code will
be included in the <head></head> section."
  :group 'ewo
  :type 'string)

(defcustom ewo-navbar-class "navbar navbar-inverse navbar-fixed-top"
  "A string describing the class of the bootstrap navigation bar."
  :group 'ewo
  :type 'string)

(defcustom ewo-ext-link-addition "ewoextlink"
  "A string describing the class of external links. To activate
this feature please consult the documentation of
`ewo-ext-link-addition-type'."
  :group 'ewo
  :type 'string)

(defcustom ewo-int-link-addition "ewointlink"
  "A string describing the class of internal links. To activate
this feature please consult the documentation of
`ewo-int-link-addition-type'."
  :group 'ewo
  :type 'string)

(defcustom ewo-ext-link-addition-type nil
  "An atom describing the type of addtion performed on external
links. The possible values are :

`anchor' 

The content of variable `ewo-ext-link-addition' is interpreted as
a class attribute specification which is added to the external
link `<a>' element.

`span'

The content of variable `ewo-ext-link-addition' is interpreted as
a span class attribute specification. A `<span>' element is added
at the end of the link with the specified class.

`nil'

No transformation is performed on external links.
"
  :group 'ewo
  :type '(choice (const :tag "Anchor" anchor)
		 (const :tag "Span" span)
		 (const :tag "None" nil)))

(defcustom ewo-int-link-addition-type nil
  "An atom describing the type of addtion performed on internal
links. The possible values are :

`anchor' 

The content of variable `ewo-int-link-addition' is interpreted as
a class attribute specification which is added to the internal
link `<a>' element.

`span'

The content of variable `ewo-int-link-addition' is interpreted as
a span class attribute specification. A `<span>' element is added
at the end of the internal link with the specified class.

`nil'

No transformation is performed on internal links.
"
  :group 'ewo
  :type '(choice (const :tag "Anchor" 'anchor)
		 (const :tag "Span" 'span)
		 (const :tag "None" nil)))

(defvar ewo:current-root nil
  "root dir of the currently published site.
only valid during the publication process")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Internal functions
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun ewo-get-cat-prop (cat prop)
  "Get the property of a category"
  (plist-get (cdr (assoc cat ewo-categories)) prop)) 

(defun ewo-cat-names (cats)
  "Return category names list out of categories alist"
  (if (not (consp cats))
      '()
    (cons (car (car cats))
	  (ewo-cat-names (cdr cats)))))

(defun ewo-categories-nav (curcat catlist)
  "Build the navigation links to the categories. CATLIST is the
list of categories, CURCAT is the id of the current category, or
`nil' if we are processing the home page."
  (princ "--- build navigation links for categories\n")
  (if (not (consp catlist))
      '()
    (let ((catname 	(car (car catlist)))
	  (pl 		(cdr (car catlist))))
      (concat
       (make-string 10 ?\s)
       "<li" 
       (if (string-equal curcat catname)
	   " class=\"active\"" "")
       "><a href=\"" 
       (if curcat "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") 
       (plist-get pl :directory) "\">"
       (if (plist-get pl :icon) 
	   (concat "<span class=\"glyphicon glyphicon-" (plist-get pl :icon) "\" aria-hidden=\"true\"></span> ")
	 "")
       (plist-get pl :label) "</a></li>\n"
       (ewo-categories-nav curcat (cdr catlist))))))

(defun ewo-rootlink (level)
  "Generate an up link to root depending on LEVEL"
  (if (= level 0)
      ""
    (concat "../" (ewo-rootlink (- level 1)))))

;; perhaps rename this, or remove. In the latter case, remove
;; ewo-html-preamble, as it can directly be included as html-preamble.
(defun ewo-html-nav (propl)
  "Build the navigation. PROPL is the list of publishing properties. Includes
the preamble before if not `nil'."
  (concat (if ewo-html-preamble ewo-html-preamble "") "\n"))

(defun ewo-cat-props (cat root publish)
"Generate the publication properties for a category CAT. The root
of the project is ROOT and the publishing directory is PUBLISH."
  (let* ((name  (car cat))
	 (props (cdr cat))
	 (label (plist-get props :label))
	 (dir   (plist-get props :directory)))
    (list
     name
     :base-directory (concat root "/" dir)
     :base-extension "org"
     :exclude "^\\(.*~\\|^.#.*\\)$"
     :publishing-directory (concat publish "/" dir)
     :publishing-function 'ewo-html-publish-to-html
     :recursive t
     :headline-levels 3
     ;; :style-include-default nil           ; seems to be obsolete
     :html-head-include-default-style nil ; use this now
     :section-numbers nil
     ;; :table-of-contents nil ; seems to be obsolete
     :with-toc t ; use this now
     :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
     :html-head ewo-cat-html-head
     :html-preamble 'ewo-html-nav
     :html-postamble ewo-html-postamble
     :ewo-with-toc t ; generate toc in navbar
     :ewo-cat-name name)))


(defun ewo-cat-project-alist (catlist root publish)
  "Generate the publication association list for the different
categories. This list respects the format of
`org-publish-projetct-alist'. The root directory of the project
is ROOT and the publishing directory is PUBLISH. CATLIST is the
list of categories."
  (if (not (consp catlist))
      '()
    (cons
     (ewo-cat-props (car catlist) root publish)
     (ewo-cat-project-alist (cdr catlist) root publish))))

(defun ewo-gen-project-alist (root publish)
  "Project alist generation. Uses the ROOT directory and the PUBLISH directory of the project.

Must be called after any modification of :

- the page head content, or,
- the postamble content, or,
- the `ewo-categories' alist

e.g. if you tweak these parameters in your
.emacs. This is automatically performed by the publication
function `ewo-publish'."
  (setq org-publish-project-alist
	(append
	 (list
	  (list
	   "orgfiles"
	   :base-directory root
	   :base-extension "org"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory publish
	   :publishing-function 'ewo-html-publish-to-html
	   :headline-levels 3
	   ;; :style-include-default nil           ; seems to be obsolete
	   :html-head-include-default-style nil ; use this now
	   :section-numbers nil
	   ;; :table-of-contents nil       ; seems to be obsolete
           :with-toc t ; use this now
	   :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
	   :html-head ewo-html-head
	   :html-preamble 'ewo-html-nav
	   :html-postamble ewo-html-postamble
           :ewo-cat-name nil))
	 (ewo-cat-project-alist ewo-categories root publish)
	 (list
	  (list
	   "images"
	   :base-directory (concat root "/images")
	   :base-extension "jpg\\|gif\\|png"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :recursive t
	   :publishing-directory (concat publish "/images")
	   :publishing-function 'org-publish-attachment)
	  
	  (list 
	   "css"
	   :base-directory (concat root "/css")
	   :base-extension "css\\|map"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/css")
	   :publishing-function 'org-publish-attachment)
	  
	  (list
	   "js"
	   :base-directory (concat root "/js")
	   :base-extension "js"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/js")
	   :publishing-function 'org-publish-attachment)

	  (list
	   "documents"
	   :base-directory (concat root "/documents")
	   :base-extension ewo-doc-extensions
	   :recursive t
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/documents")
	   :publishing-function 'org-publish-attachment)
	  
	  (list
	   "fonts"
	   :base-directory (concat root "/fonts")
	   :base-extension "woff2\\|woff\\|ttf\\|svg\\|eot\\|otf\\|pfa"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/fonts")
	   :publishing-function 'org-publish-attachment)

	  `("website" :components ,(append 
				    '("orgfiles" "images" "css" "js" "fonts" "documents")
				    (ewo-cat-names ewo-categories)))))))


(defun ewo-int-getlevel (cattree pos)
  "Get the category level given a category tree."
  (if (string-match "/" cattree pos)
      (+ 1 (ewo-int-getlevel cattree (+ pos (match-end 0))))
    0))

(defun ewo-get-level (filename)
  "Get file level from root. Used to determine the value of the
template variable `ewo:catlevel'."
  (let* ((full-root (expand-file-name ewo:current-root))
	 (regex (concat full-root  
			"\\(\\(/[-_a-zA-Z0-9]+\\)+\\)?/[-_a-zA-Z0-9]+\\.org")))
    (if (string-match regex filename)
	(if (not (match-string 1 filename))
	    ;; at root ! (no subexpression match)
	    0
	  (ewo-int-getlevel 
	   (substring filename (match-beginning 1) (match-end 1)) 0))
      nil)))

(defun ewo-get-catname (channel)
  "Return the category name of the current document as a string,
or an empty string if this document is not in a category (root
index case)."
  (let ((name (plist-get channel :ewo-cat-name)))
    (if name name "")))

;; needs more thinking : the breadcrumb have to consider the current
;; category active when we are on the index page of the category, but
;; what if we are in the category but not on the index file ? Do we
;; create a special status for the subdirectories of the category ? ->
;; do we plan subcategories ?
;;
;; Pros : more clean organization
;; Cons : less flexibility.
;;
;; In the meantime, all the architecture to include template functions
;; which need for the communication channel is ready.

;; (defun ewo-breadcrumb (channel catname)
;;   "Build a bootstrap breadcrumb as a string.  CHANNEL is a
;; property list useed as a communication channel, CATNAME is the
;; category name."  
;;   (concat
;;    "<ol class=\"breadcrumb\">"
;;    (let ((pub-level (ewo-get-level (plist-get channel :input-file))))
;;      (concat 
;;       (cond ((= level 0) "<li class=\"active>")
;;             (t           (concat "<li><a href=\"" (ewo-root-link pub-level) "\">")))
;;       ewo-home-name
;;       (if (/= level 0) "</a>" "")
;;       "</li>"
;;       (cond ((= level 1) "<li class=\"active\">")
;;             (t           (concat "<li><a href=\"" (ewo-root-link pub-level) "/\">")))
;;       catname
;;       (if (/= level 1) "</a>" "")
;;       "</li>"
;;       ( 
;; ))))
  

(defvar ewo-template-funcs '((ewo-rootlink . (:arity 1 :optargs t :addchannel nil))
                             (+ . (:arity 2 :optargs t :addchannel nil))
                             (- . (:arity 2 :optargs t :addchannel nil))
                             (* . (:arity 2 :optargs t :addchannel nil))
                             (/ . (:arity 2 :optargs t :addchannel nil))
                             (% . (:arity 2 :optargs nil :addchannel nil))
                             (mod . (:arity 2 :optargs nil :addchannel nil))
                             (1+ . (:arity 1 :optargs nil :addchannel nil))
                             (1- . (:arity 1 :optargs nil :addchannel nil))
                             (quote . (:arity 1 :optargs nil :addchannel nil)))
  "Safe functions and their arity usable in templates.

The property list associated to each function contains the following entries

`:arity' : an integer specifying the arity of the function (mandatory args).

`:optargs' : a boolean indicating wether this function accepts
optionnal arguments.

`:addchannel' : a boolean indicating if the communication channel
should be passed as first arg to the function.
")

(defvar ewo-template-vars '(ewo:catlevel ewo:catname)
  "List of variables which can be safely used in templates.")


(defun ewo-secure-callp (expr)
  "Check if EXPR is a n authorized function call.

Return the EXPR on success, with modified args if function needs
the communication channel, in which case the channel is added as
first arg. Return `nil' otherwise."
  (let* ((funcname (car expr))
         (args     (cdr expr))
         (funcentry (assq funcname ewo-template-funcs)))
    ;; (princ (format "funcname : %s\n" funcname))
    ;; (princ (format "args : %s\n" args))
    ;; (princ (format "funcentry : %s\n" funcentry))
    (when funcentry
      (let* ((funcdesc    (cdr funcentry))
             (funcarity   (plist-get funcdesc :arity))
             (funcoptargs (plist-get funcdesc :optargs)))
        (when (or 
               (and funcoptargs (>= (length args) funcarity))
               (and (not funcoptargs) (= (length args) funcarity)))
          (let ((res      (ewo-secure-argsp args))
                (needchan (plist-get funcdesc :addchannel)))
            (if needchan
                (cons funcname (cons 'channel res))
              (cons funcname res))))))))
           
(defun ewo-secure-argsp (args)
  "Check if the ARGS of a function call are safe.

Return the ARGS, or `nil' otherwise."
  ;; (princ (format "args check %s\n" args)) 
  (if (null args)
      (progn
        ;; (princ "==> ()\n")
        '())
    (when (ewo-secure-expressionp (car args))
      (let ((res (ewo-secure-argsp (cdr args))))
        ;; (princ (format "rec return from argsp : %s\n" res)) 
        ;; (princ (format "==> %s\n" (cons (car args) res))) 
        (cons (car args) res)))))

(defun ewo-secure-varp (expr)
  "Check if EXPR is an authorized variable.

Return the EXPR upon success, `nil' otherwise. "
  (when (memq expr ewo-template-vars) expr))

(defun ewo-secure-expressionp (expr)
  "Check if EXPR is a secure expression. secure expressions
conform to the following grammar:

<expression> ::= `(' <fun> <expressionlist> `)' |
                 <var> |
                 <constant>

<expressionlist> ::= <expressionlist> <expression> | 

<fun> must be a known function. arity is checked (see `ewo-secure-callp')

<var> must be a known variable name (see `ewo-secure-varp')

<constants> are numbers or strings

Return the expression, possibly modified (see `ewo-secure-callp')
if it is secure, or `nil' otherwise.
"
  (cond 
   ((listp expr)
    ;; (princ (format "call check %s\n" expr))
    (ewo-secure-callp expr))
   ((numberp expr) 
    ;; (princ (format "number check %s\n" expr))
    expr)
   ((stringp expr) 
    ;; (princ (format "string check %s\n" expr))
    expr)
   ((symbolp expr) 
    ;; (princ (format "var check %s\n" expr))
    (ewo-secure-varp expr))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toc generation system
;;
;; The two stages generation is a real mess, or at least an horrible
;; hack. It highlights the need for a cleaner mechanism, like an
;; extension of the html-export backend.

(defun ewo-html--toc-text (toc-entries)
  "Return content of a toc, as a string.  TOC-ENTRIES is an alist
where key is an entry title, as a string, and value is its
relative level, as an integer."
  (let* ((prev-level (1- (cdar toc-entries)))
	 (start-level prev-level))
    (concat
     (mapconcat
      (lambda (entry)
	(let ((headline (car entry))
	      (level (cdr entry)))
	  (concat
	   (let* ((cnt (- level prev-level))
		  (times (if (> cnt 0) (1- cnt) (- cnt))))
	     (setq prev-level level)
	     (concat
	      (org-html--make-string
	       times (cond ((> cnt 0) "\n<ul>\n<li>")
			   ((< cnt 0) "</li>\n</ul>\n")))
	      (if (> cnt 0) "\n<ul>\n<li>" "</li>\n<li>")))
	   headline)))
      toc-entries "")
     (org-html--make-string (- prev-level start-level) "</li>\n</ul>\n"))))


(defun ewo-html-toc (depth info)
  "Build the toc with the specified DEPTH. INFO is a property
list used as a communication channel."
  (let ((toc-entries 
         (mapcar (lambda (headline)
                   (cons (org-html--format-toc-headline headline info)
                         (org-export-get-relative-level headline info)))
                 (org-export-collect-headlines info depth))))
    (when toc-entries
      ;; à adapter à partir de la version org dans ox-html.el
      (ewo-html--toc-text toc-entries))))

(defun ewo-html--toc-text (toc-entries)
  "Return content of a toc, as a string.  TOC-ENTRIES is an alist
where key is an entry title, as a string, and value is its
relative level, as an integer."
  (let* ((prev-level (1- (cdar toc-entries)))
	 (start-level prev-level))
    (concat
     (mapconcat
      (lambda (entry)
	(let ((headline (car entry))
	      (level (cdr entry)))
	  (concat
	   (let* ((cnt (- level prev-level))
		  (times (if (> cnt 0) (1- cnt) (- cnt))))
	     (setq prev-level level)
	     (concat
	      (org-html--make-string
	       times (cond ((> cnt 0) "\n<ul>\n<li>")
			   ((< cnt 0) "</li>\n</ul>\n")))
	      (if (> cnt 0) "\n<ul>\n<li>" "</li>\n<li>")))
	   headline)))
      toc-entries "")
     (org-html--make-string (- prev-level start-level) "</li>\n</ul>\n"))))

(defun ewo-toc-content (depth info)
  "Format the innards of the toc. DEPTH is the depth of headers
to include in the toc, info is an alist ised as a communication
channel."
  (let ((toc-entries 
         (mapcar (lambda (headline)
                   (cons (org-html--format-toc-headline headline info)
                         (org-export-get-relative-level headline info)))
                 (org-export-collect-headlines info depth))))
    (when toc-entries
      ;; à adapter à partir de la version org dans ox-html.el
      (ewo-html--toc-text toc-entries))))

(defun ewo-html-toc (depth info)
  "Build the toc. DEPTH is the depth of headers to include in the
toc, info is an alist ised as a communication channel."
  (concat "        <li class=\"dropdown ewo-toc\">
          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Table des matières <span class=\"caret\"></span></a>
          <ul class=\"dropdown-menu dropdown-menu-right\">"
          (ewo-toc-content depth info)
"</ul>
        </li>")
)


(defun ewo-html-navbar (info)
  "Build the navigation bar, and optionnally the toc. INFO is a
plist used as a communication channel."
  (let ((name (plist-get info :ewo-cat-name))) ; get the name of the
                                                ; category (nil if we
                                                ; are on the homepage)
    (concat 
     "<header>\n"
"  <nav class=\"" ewo-navbar-class "\">
    <div class=\"container\">
      <div class=\"navbar-header\">
        <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">
          <span class=\"sr-only\">Toggle navigation</span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
        </button>
        <a class=\"navbar-brand\" href=\"" (if name "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") "\">" ewo-name "</a>
      </div>
      <div id=\"navbar\" class=\"navbar-collapse collapse\">
        <ul class=\"nav navbar-nav\">
          <li" (if (not name) " class=\"active\"" "") "><a href=\"" (if name "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") "\"><span class=\"glyphicon glyphicon-home\" aria-hidden=\"true\"></span> " ewo-home-name "</a></li>\n" 
	  (ewo-categories-nav name ewo-categories)
          (let ((depth (plist-get info :with-toc)))
            (when depth (ewo-html-toc depth info)))
"       </ul>
      </div> <!-- navbar-collapse -->
    </div> <!-- container-fluid -->
  </nav>
</header>")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; filter system : allows the execution of lisp formulae included in
;; <lisp></lisp> constructs.
  
(defun ewo-filter-prepost (fstring backend channel)
  "An HTML filter which execute lisp functions included in <lisp>...</lisp> constructs.
Only allowed functions with allowed args are possible, and args
must be in a list of allowed variables."
  (when (eq backend 'ewo)
    ;; build the environment of the function calls (i.e. variables available to the user in templates
    ;; (princ (format "post-processing file \"%s\"\n"  (plist-get channel :input-file)))
    (let ((ewo:catlevel (ewo-get-level (plist-get channel :input-file)))
          (ewo:catname  (ewo-get-catname channel))
	  (search-start nil))
      ;; (princ (format "ewo:catlevel: %s\n" ewo:catlevel))
      ;; (princ (format "ewo:catname: %s\n" ewo:catname))
      (while (string-match "<lisp>\\(.+?\\)</lisp>" fstring search-start)
	(let* ((start (match-beginning 1))
	       (end   (match-end 1))
	       (strform (substring fstring start end))
	       (form (read strform)))
	  ;; (princ (format "===== lisp expr is \"%s\"\n" strform))
          (let ((final-form (ewo-secure-expressionp form)))
            ;; (princ (format "===== lisp final expr is \"%s\"\n" final-form))
            (if final-form
                (let* ((fun (list 'lambda ewo-template-vars final-form))
                       (args (mapcar (lambda (v) (symbol-value v)) ewo-template-vars))
                       (result (apply fun args)))
                  (setq fstring (concat
                                 (substring fstring 0 (- start 6)) ; jq avant <lisp>
                                 result
                                 (substring fstring (+ end 7) nil)))) ; on commence après </lisp>
              (error "unsecure or malformed expression : %s" strform)))
	  (setq search-start end)))))
  fstring)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Header filter

;;; TODO : Modularize this ! Perhaps transform into as a translation function  
(defun ewo-filter-headline (fstring backend channel)
  "Headers and section processing:

- if containing outline div is of class panel : 
  1. surround h[2-5] headers with div class panel-header,
  2. add class panel-body to de div class outline-text-[2-5].
  Warning ! This processing relies on the fact that the section has a
  property HTML_CONTAINER_CLASS which value is the bootstrap panel
  classes.

- Surround sections with published BOOSTRAP_COLUMN property with
  a <div> with the corresponding class (use bootstrap column
  classes, like col-md-*, col-sm-* ...). 

- Prefix sections with published BOOTSTRAP_ROW_BEGIN property
  with a <div class=\"row\">.

- Suffix sections with published BOOTSTRAP_ROW_END property
  with a <div class=\"row\">.

The processing of bootstrap row and columns suppose that property
drawer filters are called before headline filters, as the ewo
property drawer filter set flags indicating the presence of
columns and row begin or end."
  (when (not (eq backend 'html)) fstring) 
  ;; (princ "*************************************************************************\n")
  ;; (princ (format "head : \"%s\"\n\n" fstring))
  ;; (princ (format "channel : %s\n\n" channel))
  (let ((re "^\\(<div.+class=\"outline-[2-5].+panel.+\">[[:space:]]*\n\\)\\(<h[2-5].+>.+</h[2-5]>[[:space:]]*\n\\)\\(\\(.\\|\n\\)+</div>\\)\\(\n*\\)$"))
    (when (string-match re fstring)
      (let ((start-outline-2 (match-beginning 1))
	    (end-outline-2 (match-end 1))
	    (start-h2 (match-beginning 2))
	    (end-h2 (match-end 2))
	    (start-div-body (match-beginning 3))
	    (end-div-body (match-end 3))
	    (start-tail (match-beginning 5))
	    (end-tail (match-end 5)))
	(setq fstring (concat
		       (substring fstring start-outline-2 end-outline-2)
		       "<div class=\"panel-heading\">\n"
		       (let ((h2 (substring fstring start-h2 end-h2)))
			 (if (string-match "^\\(.+class=\".+\\)\\(\".+\\)$" h2)
			     (let ((pre (match-string 1 h2))
				   (post (match-string 2 h2)))
			       (concat pre " panel-title" post))
			   (if (string-match "^\\(<h[2-5].+\\)\\(>.+$\\)" h2) ; should match
			       (let ((pre (match-string 1 h2))
				     (post (match-string 2 h2)))
				 (concat pre " class=\"panel-title\"" post))
			     (substring fstring start-h2 end-h2))))
		       "</div>\n"
		       "<div class=\"panel-body\">\n"
		       (substring fstring start-div-body end-div-body)
		       "\n</div>\n"
		       (substring fstring start-tail nil))))))
  ;; now check if properties regarding bootstrap rows and columns have
  ;; been set. Add divs accordingly. This is soooo weird (because it
  ;; relies on filter application order)....

  (when ewo-bootstrap-column
    (setq fstring (concat
		   "<div class=\"" ewo-bootstrap-column "\">\n"
		   fstring
		   "</div> <!-- bootstrap column -->\n"))
    (setq ewo-bootstrap-column nil))
  (when ewo-bootstrap-row-begin
    (setq fstring (concat 
		   "<div class=\"row\">\n"
		   fstring))
    (setq ewo-bootstrap-row-begin nil))
  (when ewo-bootstrap-row-end
    (setq fstring (concat 
		   fstring
		   "</div>\n"))
    (setq ewo-bootstrap-row-end nil))
  
  fstring)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawer filter

(defvar ewo-bootstrap-column nil
"non nil indicates that current section should be embeded into a
column.")
(defvar ewo-bootstrap-row-begin nil
"Non nil means that the current section shoud start a new row")
(defvar ewo-bootstrap-row-end nil
"Non nil means that the current section shoud end a new row")

;; careful : relies on the fact that this filter will be applied before
;; headline filter  (`ewo-filter-headline').
(defun ewo-filter-drawer (fstring backend channel)
  "Extract information from BOOTSTRAP_COLUMN, BOOTSTRAP_ROW_BEGIN
and BOOTSTRAP_ROW_END properties. This information will be used
by the headline filter `ewo-filter-headline'."
  (when (not (eq backend 'html)) nil)
  ;; (princ (format "drawer : \"%s\"\n" fstring))
  (when (string-match "^BOOTSTRAP_COLUMN:[[:space:]]+\\(.+\\)[[:space:]]*$" fstring)
    ;; (princ "COLUMN OK !!!!!!!!!!!!!!!!!\n")
    (setq ewo-bootstrap-column (match-string 1 fstring)))
  (when (string-match "^BOOTSTRAP_ROW_BEGIN:[[:space:]]+.+[[:space:]]*$" fstring)
    ;; (princ "ROW BEGIN OK !!!!!!!!!!!!!!!!!\n")
    (setq ewo-bootstrap-row-begin t))
  (when (string-match "^BOOTSTRAP_ROW_END:[[:space:]]+.+[[:space:]]*$" fstring)
    ;; (princ "ROW END OK !!!!!!!!!!!!!!!!!\n")
    (setq ewo-bootstrap-row-end t))
  ;; return a newline because filter system doesn't like empty strings
  "\n")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; link filter

(defun ewo-filter-link (fstring backend channel)
  (when (not (eq backend 'html)) nil)
  (if (string-match "href=\"[a-z]+://" fstring)
      ;; external link
      (cond ((eq ewo-ext-link-addition-type 'anchor) 
	     (when (and ewo-ext-link-addition (string-match "^<a +\\(href.+\\)$" fstring))
	       (setq fstring (concat "<a class=\"" 
				     ewo-ext-link-addition "\" " 
				     (match-string 1 fstring)))))
	    ((eq ewo-ext-link-addition-type 'span) 
	     (when (and ewo-ext-link-addition (string-match "^\\(<a[^>]+>[^>]+\\)</a>$" fstring))
	       (setq fstring (concat (match-string 1 fstring) 
				     " <span class=\"" ewo-ext-link-addition "\"></span></a>")))))
    ;; internal link
    (cond ((eq ewo-int-link-addition-type 'anchor) 
	   (when (and ewo-int-link-addition (string-match "^<a +\\(href.+\\)$" fstring))
	     (setq fstring (concat "<a class=\"" 
				   ewo-int-link-addition "\" " 
				   (match-string 1 fstring)))))
	  ((eq ewo-int-link-addition-type 'span) 
	   (when (and ewo-ext-link-addition (string-match "^\\(<a[^>]+>[^>]+\\)</a>$" fstring))
	     (setq fstring (concat (match-string 1 fstring) 
				   " <span class=\"" ewo-int-link-addition "\"></span></a>"))))))
  fstring)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Main translation funtions  
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ewo-html-inner-template (contents info)
  "Return body of document string after HTML conversion.
CONTENTS is the transcoded contents string.  INFO is a plist used
as a communication channel."
  (concat
   (ewo-html-navbar info)
   ;; Document contents.
   contents
   ;; Footnotes section.
   (org-html-footnote-section info)))

(defun ewo-html-template (contents info)
  "Return complete document string after HTML conversion.
CONTENTS is the transcoded contents string.  INFO is a plist
holding export options.

Largely borrowed from org-html-template. The only difference is
the addition of the <div> surrounding all the body."
  (concat
   (when (and (not (org-html-html5-p info)) (org-html-xhtml-p info))
     (let* ((xml-declaration (plist-get info :html-xml-declaration))
	    (decl (or (and (stringp xml-declaration) xml-declaration)
		      (cdr (assoc (plist-get info :html-extension)
				  xml-declaration))
		      (cdr (assoc "html" xml-declaration))
		      "")))
       (when (not (or (not decl) (string= "" decl)))
	 (format "%s\n"
		 (format decl
			 (or (and org-html-coding-system
				  (fboundp 'coding-system-get)
				  (coding-system-get org-html-coding-system 'mime-charset))
			     "iso-8859-1"))))))
   (org-html-doctype info)
   "\n"
   (concat "<html"
	   (cond ((org-html-xhtml-p info)
		  (format
		   " xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"%s\" xml:lang=\"%s\""
		   (plist-get info :language) (plist-get info :language)))
		 ((org-html-html5-p info)
		  (format " lang=\"%s\"" (plist-get info :language))))
	   ">\n")
   "<head>\n"
   (org-html--build-meta-info info)
   (org-html--build-head info)
   (org-html--build-mathjax-config info)
   "</head>\n"
   "<body>\n<div class=\"container\">\n"
   (let ((link-up (org-trim (plist-get info :html-link-up)))
	 (link-home (org-trim (plist-get info :html-link-home))))
     (unless (and (string= link-up "") (string= link-home ""))
       (format (plist-get info :html-home/up-format)
	       (or link-up link-home)
	       (or link-home link-up))))
   ;; Preamble.
   (org-html--build-pre/postamble 'preamble info)
   ;; Document contents.
   (let ((div (assq 'content (plist-get info :html-divs))))
     (format "<%s id=\"%s\">\n" (nth 1 div) (nth 2 div)))
   ;; Document title.
   (when (plist-get info :with-title)
     (let ((title (plist-get info :title))
	   (subtitle (plist-get info :subtitle))
	   (html5-fancy (org-html--html5-fancy-p info)))
       (when title
	 (format
	  (if html5-fancy
	      "<header>\n<h1 class=\"title\">%s</h1>\n%s</header>"
	    "<h1 class=\"title\">%s%s</h1>\n")
	  (org-export-data title info)
	  (if subtitle
	      (format
	       (if html5-fancy
		   "<p class=\"subtitle\">%s</p>\n"
		 "\n<br>\n<span class=\"subtitle\">%s</span>\n")
	       (org-export-data subtitle info))
	    "")))))
   contents
   (format "</%s>\n" (nth 1 (assq 'content (plist-get info :html-divs))))
   ;; Postamble.
   (org-html--build-pre/postamble 'postamble info)
   ;; Closing <div class="container">
   "</div> <!-- class container -->\n"
   ;; Closing document.
   "</body>\n</html>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Backend definition and interactive functions
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; defines the backend.
;;
;; From now on, navigation bar is generated by the inner-template
;; generator, not by the preamble. The preamble will be totally deactivated.

(org-export-define-derived-backend 'ewo 'html
  :translate-alist '(;(headline . ewo-html-headline-translator)
                     (inner-template . ewo-html-inner-template)
                     (template . ewo-html-template))
  :filters-alist '((:filter-link . ewo-filter-link)
                   (:filter-property-drawer . ewo-filter-drawer)
                   (:filter-headline . ewo-filter-headline)
                   (:filter-final-output . ewo-filter-prepost)))

;;;###autoload
(defun ewo-html-publish-to-html (plist filename pub-dir)
  "Publish an org file to HTML using ewo backend.

FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.

Return output file name."
  (princ "ewo-html publishing started\n")
  (org-publish-org-to 'ewo filename
		      (concat "." (or (plist-get plist :html-extension)
				      org-html-extension
				      "html"))
		      plist pub-dir))

;; main entry point ! 
;;;###autoload
(defun ewo-publish (config)
  "Publish the specified website. Config is a configuration id."
  (interactive
   (list (completing-read (format "Config to publish (%s) :"
                                  (mapconcat #'(lambda (var) (car var))
                                             ewo-configurations "/"))
                          (mapcar #'(lambda (var) (car var)) ewo-configurations)
                          nil t nil nil (car (car ewo-configurations)))))
  (let ((config-props (cdr (assoc config ewo-configurations))))
    (if config-props
        (save-excursion
          (let* ((root-dir (plist-get config-props :root-dir))
                 (publish-dir (plist-get config-props :publish-dir)))
            (if (and root-dir publish-dir)
                (progn
                  (message "Publishing ewo config %s, root dir %s, publishing dir %s"
                           config root-dir publish-dir)
                  (setq ewo:current-root root-dir)
                  (ewo-gen-project-alist root-dir publish-dir)
                  (org-publish "website")
                  (setq ewo:current-root nil)
                  (message "ewo publishing complete"))
              (error "bad ewo config"))))
      (error "ewo config not found"))))

(provide 'ox-ewo)

;;; ox-ewo.el ends here

