;; Copyright 2017-2018 Éric Würbel

;; This file is part of EWO.

;; EWO is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; EWO is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with EWO.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Easy Website with Org (EWO) project
;;;
;;; Generates a site organized in categories. Relies on the bootstrap
;;; framework by default but this can be customized.
;;;
;;; There is only one category level.
;;; There are two kinds of categories :
;;;
;;; static categories
;;; -----------------
;;;
;;; the category correspond to one page (index.org) in the category
;;; directory. The content of this page is entirely user-defined. The
;;; blogging system only task is to generate navigation links.
;;;
;;; In order to create a static category, set the `:type' attribute to
;;; `static'.
;;;
;;; blogging categories 
;;; -------------------
;;;
;;; The category correspond to one page (`index.org') in the category
;;; directory. The resulting `index.html' page is automagically
;;; generated by the system. It present a table of content of the
;;; various articles published in the category. Articles are sorted by
;;; inverse chronological order.  Each article is a org file in the
;;; subtree rooted at the category directory.
;;;
;;; Only articles with the #+EWO_STATE: keyword set to "published"
;;; will be published. articles without this keyword or with EWO_STATE
;;; set to a value différent from "published" will not be published
;;; (in fact they will not be incorporated in the toc, but are
;;; actually published, this is a TODO).
;;;
;;; If a section heading with property HTML_CONTAINER_CLASS set to
;;; "ewo-toc" is present in the main index.org file of the site, then
;;; a toc of the last blog articles is generated. The number of
;;; elements in this toc is customizable via the `ewo-last-articles'
;;; variable.
;;; 
;;; In order to create a blogging category, set the `:type' attribute
;;; to `blog'.
;;;
;;; full details are provided in the documentation.
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'avl-tree)

(require 'org)
(require 'ox)
(require 'ox-html)
(require 'ox-publish)
(require 'ewo-util)
(require 'ewo-blog)
(require 'ewo-tags)
(require 'ewo-template)

(setq lexical-binding t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Configuration variables.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defgroup ewo nil
  "Easy Websites with org mode."
  :tag "Ewo"
  :group 'org)


(defcustom ewo-name "EWO"
  "The name of the website."
  :group 'ewo
  :type 'string)

(defcustom ewo-root-dir "~/Documents/www/MonSite/org"
  "Root directory of the org-source of the website."
  :group 'ewo
  :type 'directory)

(defcustom ewo-configurations
  '(("default"
     :publish-dir "~/public_html"))
  "Association list of alternative publishing configurations for
ewo. Each elements has the form (KEY . VALUE), where KEY is a
string, uniquely identifying the configuration, and VALUE is a
well formed property list with an event number of elements,
alternating keys and values, which specifies the configuration
values. The possible configuration values are:

    `:publish-dir'

    The publishing directory of the website."
  :group 'ewo
  :type '(alist 
	  :key-type string  
	  :value-type plist))

(defcustom ewo-categories
  '(("teaching"
     :label "Teaching"
     :directory "Teaching"
     :icon "education"
     :type static)
    ("research"
     :label "Research"
     :directory "Research"
     :icon "eye-open"
     :type static))
  "Association list of the categories defining a website project.
Each element of the alist is a category of the website. It has
the form (KEY . VALUE), where KEY is a string, uniquely
identifying the category, and VALUE is a well formed property
list with an even number of elements, alternating keys and
values, specifying the parameters of the category.

  \(:property value :property value ... )

The defined properties are :

  `:label'

  The label of the category as it will appear in the navigation
  bar. This property is mandatory.

  `:directory'

  Directory containing the pages of the category. This property
  is mandatory.

  `:icon' 

  the icon name, as it is named in the glyphicon list in the
  bootstrap documentation. If the icon is named \"glyphicon
  glyphicon-plus\", then just name it \"plus\". This property is
  optional.

  `:type'

  The type of the category. this can be either static or
  blog. This property is mandatory."
  :group 'ewo
  :type '(alist 
	  :key-type string  
	  :value-type plist))

(defcustom ewo-home-name "Home"
  "String naming the home of the site."
  :group 'ewo
  :type 'string)

(defcustom ewo-doc-extensions "pdf\\|doc\\|odt\\|ods\\|odp\\|odg\\|tar.gz\\|tgz\\|tar.bz2\\|zip"
  "Regular expression describing allowed extensions for
additional documents in a website."
  :group 'ewo
  :type 'regexp)

(defcustom ewo-img-extensions "jpg\\|gif\\|png\\|svg"
  "Regular expression describing allowed extensions for
images in a website."
  :group 'ewo
  :type 'regexp)

(defcustom ewo-html-postamble 
  "<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>js/bootstrap.min.js\"></script>"
  "A string containing HTML code to be included in the postamble of a page."
  :group 'ewo
  :type 'string)

(defcustom ewo-html-preamble nil
  "A string containing HTML code to be included in the preamble of a page."
  :group 'ewo
  :type 'string)

(defcustom ewo-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"css/mytypo.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>"
  "A string containing the head of the home page. This code will
be included in the <head></head> section."
  :group 'ewo
  :type 'string)

(defcustom ewo-cat-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/mytypo.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"<lisp>(ewo-rootlink ewo:catlevel)</lisp>css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>"
  "A string containing the head of the pages contained in a
category.  This code will be included in the <head></head>
section."
  :group 'ewo
  :type 'string)

(defcustom ewo-navbar-class "navbar navbar-inverse navbar-fixed-top"
  "A string describing the class of the bootstrap navigation bar."
  :group 'ewo
  :type 'string)

(defcustom ewo-navbar-container "container-fluid"
  "A string describing the class of the bootstrap navbar
container. Usual values are \"container\" and
\"container-fluid\"."
  :group 'ewo
  :type 'string)

(defcustom ewo-navbar-ul "nav navbar-nav navbar-right"
  "A string describing the class of the bootstrap ul element in a
  navbar. Usual values are \"nav navbar\" for a left-aligned
  list, and \"nav navbar navbar-right\" for a right-aligned
  list."
  :group 'ewo
  :type 'string)


(defcustom ewo-ext-link-addition "ewoextlink"
  "A string describing the class of external links. To activate
this feature please consult the documentation of variable
`ewo-ext-link-addition-type'."
  :group 'ewo
  :type 'string)

(defcustom ewo-int-link-addition "ewointlink"
  "A string describing the class of internal links. To activate
this feature please consult the documentation of variable
`ewo-int-link-addition-type'."
  :group 'ewo
  :type 'string)

(defcustom ewo-ext-link-addition-type nil
  "An atom describing the type of addition performed on external
links. The possible values are :

`anchor' 

The content of variable `ewo-ext-link-addition' is interpreted as
a class attribute specification which is added to the external
link \"<a>\" element.

`span'

The content of variable `ewo-ext-link-addition' is interpreted as
a span class attribute specification. A \"<span>\" element is
added at the end of the link with the specified class.

nil

No transformation is performed on external links.
"
  :group 'ewo
  :type '(choice (const :tag "Anchor" anchor)
		 (const :tag "Span" span)
		 (const :tag "None" nil)))

(defcustom ewo-int-link-addition-type nil
  "An atom describing the type of addtion performed on internal
links. The possible values are :

`anchor' 

The content of variable `ewo-int-link-addition' is interpreted as
a class attribute specification which is added to the internal
link \"<a>\" element.

`span'

The content of variable `ewo-int-link-addition' is interpreted as
a span class attribute specification. A \"<span>\" element is
added at the end of the internal link with the specified class.

`nil'

No transformation is performed on internal links.
"
  :group 'ewo
  :type '(choice (const :tag "Anchor" 'anchor)
		 (const :tag "Span" 'span)
		 (const :tag "None" nil)))

(defcustom ewo-blog-toc-name "List of articles"
  "The name of the table of content for a blogging category."
  :group 'ewo
  :type 'string)

(defcustom ewo-excerpt-size 80
  "The size of the excerpt to extract from the headlines of a
blog article to insert in a table of content."
  :group 'ewo
  :type 'string)

(defcustom ewo-blog-toc-entry-format "%date% - %title%"
  "The format of a toc entry for blogging categories. It is a
string, which contains special sequences \"%keyword%\", where
keyword can be:

- `date' : the date of the article

- `title' : the title of the article"
  :group 'ewo
  :type 'string)

(defcustom ewo-last-articles 10
  "The number of newest articles to put in the global toc."
  :group 'ewo
  :type '(restricted-sexp :match-alternatives
                                        ; positive integers
                          ((lambda (x) (and (integerp x) (> x 0))))))

(defcustom ewo-blog-toc-date-format "%Y-%m-%d"
  "Date format in toc headings."
  :group 'ewo
  :type 'string)

(defcustom ewo-template-dir "template"
  "Template directory, relative to root dir. See variable
`ewo-root-dir'."
  :group 'ewo
  :type 'string)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; internal variables
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar ewo:blog-global-article-list '()
  "The global list of blog articles. It is an association list,
each element being a pair (UUID . PROPERTIES), where PROPERTIES
is a property list containing the following keys :

- `:date' : the date of the article 

- `:title' : the title of the article 

- `:excerpt' : the excerpt ton include in the toc.

- `:file' : the file containing the article.")

(defvar ewo:blog-category-article-list '()
  "The list of blog articles in a blog category. It is an association list,
each element being a pair (UUID . PROPERTIES), where PROPERTIES
is a property list containing the following keys :

- `:date' : the date of the article 

- `:title' : the title of the article 

- `:excerpt' : the excerpt ton include in the toc.

- `:file' : the file containing the article.

This list is automatically cleared at the begining of the
processing of a new category.")

(defvar ewo:current-config nil
  "Current published configuration.")

(defvar ewo:conf-history nil
  "History of used configurations (for use in the minibuffer).")

(defvar ewo:last-config nil
  "Last used configuration for publishing.")

(defvar ewo:tags (avl-tree-create 'ewo:tagtree-cmpfunc)
  "The tree of tag references.

Each element ot the tree consists in a list. the car of this list
is a string representing a tag. The cdr is a list of
pairs (FILENAME . TITLE) (file names are relative to the
variable `ewo-root-dir').")

(defvar ewo:categories nil
  "The internal table of categories. It contains the content of
  `ewo-categories', plus ewo internal categories described by
  variable `ewo:internal-categories'.")

(defvar ewo:internal-categories
  '(("tags"
     :directory "tags"
     :label "Tags"
     :internal t))
  "Internal categories.")
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Internal functions
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ewo:build-internal-categories ()
  "Build the internal category list."
  (setq ewo:categories (append ewo:internal-categories ewo-categories)))

(defun ewo:public-categories ()
  "Return public categories."
  (nlet loop ((cats ewo:categories))
    (if (null cats)
        '()
      (if (plist-get (cdr (car cats)) :internal)
          (loop (cdr cats))
        (cons (car cats) (loop (cdr cats)))))))

(defun ewo:cat-names (cats)
  "Return category names list out of categories alist CATS."
  (nlet loop ((c cats))
    (if (null c)
        '()
    (cons (car (car c))
	  (loop (cdr c))))))

(defun ewo-categories-nav (curcat catlist)
  "Build the navigation links to the categories. CATLIST is the
list of categories, CURCAT is the id of the current category, or
nil if we are processing the home page."
  (if (not (consp catlist))
      '()
    (let ((catname 	(car (car catlist)))
	  (pl 		(cdr (car catlist)))) ; prop list of category
      (concat
                                        ; skip internal categories
       (unless (plist-get pl :internal)
;       (unless (and (string-equal curcat catname) (plist-get pl :internal))
         (concat 
          (make-string 10 ?\s)
          "<li" 
          (when (string= curcat catname) " class=\"active\"")
          "><a href=\"" 
          (if curcat "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") 
          (plist-get pl :directory) "\">"
          (when (plist-get pl :icon) 
            (concat "<span class=\"glyphicon glyphicon-" (plist-get pl :icon) "\" aria-hidden=\"true\"></span> "))
          (plist-get pl :label) "</a></li>\n"))
       (ewo-categories-nav curcat (cdr catlist))))))

(defun ewo-rootlink (level)
  "Generate an up link to root depending on LEVEL"
  (if (= level 0)
      ""
    (concat "../" (ewo-rootlink (- level 1)))))

(defun ewo:tag-nav (name)
  "Generate a navigation link to the tag page from category `name'."
  (let ((tag-cfg (cdr (assoc-string "tags" ewo:categories))))
    (concat
     "            <li"
     (when (string= name "tags") " class=\"active\"")
     "><a href=\""
     (if name "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./")
     "tags.html\">"
     (when (plist-get tag-cfg :icon)
       (concat "<span class=\"glyphicon glyphicon-" (plist-get tag-cfg :icon) "\" aria-hidden=\"true\"></span> "))
     (plist-get tag-cfg :label) "</a></li>\n")))


;; perhaps remove. In this case, remove ewo-html-preamble, as it can
;; directly be included as html-preamble.
(defun ewo-html-gen-preamble (propl)
  "Include the preamble id not `nil'. PROPL is the list of
publishing properties."
  (concat ewo-html-preamble "\n"))

(defun ewo-cat-props (cat root publish)
"Generate the publication properties for a category CAT. The root
of the project is ROOT and the publishing directory is PUBLISH."
  (let* ((name  (car cat))
	 (props (cdr cat))
	 (label (plist-get props :label))
	 (dir   (plist-get props :directory))
         (type  (plist-get props :type))
         (res   (list
                 name
                 :base-directory (concat root "/" dir)
                 :base-extension "org"
                 :exclude "^\\(.*~\\|^.#.*\\)$"
                 :publishing-directory (concat publish "/" dir)
                 :publishing-function 'ewo-html-publish-to-html
                 :recursive t
                 :headline-levels 3
                 ;; :style-include-default nil           ; seems to be obsolete
                 :html-head-include-default-style nil ; use this now
                 :section-numbers nil
                 ;; :table-of-contents nil ; seems to be obsolete
                 :with-toc (plist-get props :internal) ; use this now
                 :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
                 :html-head ewo-cat-html-head
                 :html-preamble 'ewo-html-gen-preamble
                 :html-postamble ewo-html-postamble
                 :ewo-with-toc t ; generate toc in navbar
                 :ewo-cat-name name)))
    (let ((prepl '()))
      (when (equal type 'blog)
        (setq prepl (cons 'ewo-prepare prepl)))
      (if (not (null prepl))
          (append res (list :preparation-function prepl))
        res))))


(defun ewo-cat-project-alist (catlist root publish)
  "Generate the publication association list for the different
categories. This list respects the format of variable
`org-publish-project-alist'. The root directory of the project is
ROOT and the publishing directory is PUBLISH. CATLIST is the list
of categories."
  (nlet loop ((cl catlist))
    (if (null cl)
        '()
      (cons
       (ewo-cat-props (car cl) root publish)
       (loop (cdr cl))))))

(defun ewo-gen-project-alist (root publish)
  "Project alist generation. Uses the ROOT directory and the PUBLISH directory of the project.

Must be called after any modification of :

- the page head content, or,
- the postamble content, or,
- the variable `ewo-categories'

e.g. if you tweak these parameters in your .emacs. This is
automatically performed by the publication function
`ewo-publish'."
  (setq org-publish-project-alist
	(append
	 (list
	  (list
	   "orgfiles"
	   :base-directory root
	   :base-extension "org"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory publish
	   :publishing-function 'ewo-html-publish-to-html
           :preparation-function '(ewo-prepare-blog-index ewo-prepare-tag-files)
	   :headline-levels 3
	   ;; :style-include-default nil           ; seems to be obsolete
	   :html-head-include-default-style nil ; use this now
	   :section-numbers nil
	   ;; :table-of-contents nil       ; seems to be obsolete
           :with-toc t ; use this now
	   :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
	   :html-head ewo-html-head
	   :html-preamble 'ewo-html-gen-preamble
	   :html-postamble ewo-html-postamble
           :ewo-cat-name nil)
          (list
           "tagfiles"
           :base-directory (concat root "/tags")
	   :base-extension "org"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/tags")
	   :publishing-function 'ewo-html-publish-to-html
	   :headline-levels 3
	   ;; :style-include-default nil           ; seems to be obsolete
	   :html-head-include-default-style nil ; use this now
	   :section-numbers nil
	   ;; :table-of-contents nil       ; seems to be obsolete
           :with-toc t ; use this now
	   :with-properties '("BOOTSTRAP_COLUMN" "BOOTSTRAP_ROW_BEGIN" "BOOTSTRAP_ROW_END")
	   :html-head ewo-cat-html-head
	   :html-preamble 'ewo-html-gen-preamble
	   :html-postamble ewo-html-postamble
           :ewo-cat-name "tags"))
	 (ewo-cat-project-alist (ewo:public-categories) root publish)
	 (list
	  (list
	   "images"
	   :base-directory (concat root "/images")
	   :base-extension ewo-img-extensions
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :recursive t
	   :publishing-directory (concat publish "/images")
	   :publishing-function 'org-publish-attachment)
	  
	  (list 
	   "css"
	   :base-directory (concat root "/css")
	   :base-extension "css\\|map"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/css")
	   :publishing-function 'org-publish-attachment)
	  
	  (list
	   "js"
	   :base-directory (concat root "/js")
	   :base-extension "js"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/js")
	   :publishing-function 'org-publish-attachment)

	  (list
	   "documents"
	   :base-directory (concat root "/documents")
	   :base-extension ewo-doc-extensions
	   :recursive t
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/documents")
	   :publishing-function 'org-publish-attachment)
	  
	  (list
	   "fonts"
	   :base-directory (concat root "/fonts")
	   :base-extension "woff2\\|woff\\|ttf\\|svg\\|eot\\|otf\\|pfa"
	   :exclude "^\\(.*~\\|#.*\\)$"
	   :publishing-directory (concat publish "/fonts")
	   :publishing-function 'org-publish-attachment)

	  `("website" :components ,(append 
				    '("images" "css" "js" "fonts" "documents")
				    (ewo:cat-names (ewo:public-categories))
                                        ; org files (ie top index) and tags should be last
                                    '("orgfiles" "tagfiles")))))))


(defun ewo-int-getlevel (cattree pos)
  "Get the category level given a path CATTREE. Starts the search
at position POS."
  (if (string-match "/" cattree pos)
      (+ 1 (ewo-int-getlevel cattree (+ pos (match-end 0))))
    0))

(defun ewo-get-level (filename)
  "Get file level from root. FILENAME is the pathname of the
file. Used to determine the value of the template variable
`ewo:catlevel'."
  (let* ((full-root (expand-file-name ewo-root-dir))
	 (regex (concat full-root  
			"\\(\\(/[-_[:alpha:]0-9]+\\)+\\)?/[-_[:alpha:]0-9]+\\.org")))
    (if (string-match regex filename)
	(if (not (match-string 1 filename))
	    ;; at root ! (no subexpression match)
	    0
	  (ewo-int-getlevel 
	   (substring filename (match-beginning 1) (match-end 1)) 0))
      nil)))

(defun ewo-get-catname (channel)
  "Return the category name of the current document as a string,
or an empty string if this document is not in a category (root
index case). 

CHANNEL is the communication channel of the org publishing
process."
  (let ((name (plist-get channel :ewo-cat-name)))
    (if name name "")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Templating functions system
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar ewo-template-funcs '((ewo-filetags . (:arity 1 :optargs t :addchannel t))
                             (ewo-rootlink . (:arity 1 :optargs nil :addchannel nil))
                             (+ . (:arity 2 :optargs nil :addchannel nil))
                             (- . (:arity 2 :optargs nil :addchannel nil))
                             (* . (:arity 2 :optargs nil :addchannel nil))
                             (/ . (:arity 2 :optargs nil :addchannel nil))
                             (% . (:arity 2 :optargs nil :addchannel nil))
                             (mod . (:arity 2 :optargs nil :addchannel nil))
                             (1+ . (:arity 1 :optargs nil :addchannel nil))
                             (1- . (:arity 1 :optargs nil :addchannel nil))
                             (quote . (:arity 1 :optargs nil :addchannel nil)))
  "Safe functions for \"<lisp>\" templates.

This is a association list where each element has the form (FUNC
. PROPS), where func is the symbol represention the function, and
PROPS is a property list associated to each function.  PROPS
contains the following entries :

`:arity' : an integer specifying the arity of the
function (mandatory args).

`:optargs' : a boolean indicating wether this function accepts
optionnal arguments.

`:addchannel' : a boolean indicating if the communication channel
should be passed as first arg to the function (not counted in arity).")

(defvar ewo-template-vars '(ewo:catlevel ewo:catname)
  "List of variables which can be safely used in templates.")


(defun ewo-secure-callp (expr)
  "Check if EXPR is an authorized function call.

Return the EXPR on success, with modified args if function needs
the communication channel, in which case the channel is added as
first arg. Return nil otherwise."
  (let* ((funcname (car expr))
         (args     (cdr expr))
         (funcentry (assq funcname ewo-template-funcs)))
    (when funcentry
      (let* ((funcdesc    (cdr funcentry))
             (funcarity   (plist-get funcdesc :arity))
             (funcoptargs (plist-get funcdesc :optargs)))
        (when (or 
               (and funcoptargs (>= (length args) funcarity))
               (and (not funcoptargs) (= (length args) funcarity)))
          (let ((res      (ewo-secure-argsp args))
                (needchan (plist-get funcdesc :addchannel)))
            (if needchan
                (cons funcname (cons 'channel res))
              (cons funcname res))))))))
           
(defun ewo-secure-argsp (args)
  "Check if the ARGS of a function call are safe.

Return the ARGS, or nil otherwise."
  (if (null args)
      '()
    (when (ewo-secure-expressionp (car args))
      (let ((res (ewo-secure-argsp (cdr args))))
        (cons (car args) res)))))

(defun ewo-secure-varp (expr)
  "Check if EXPR is an authorized variable.

Return the EXPR upon success, nil otherwise. "
  (when (memq expr ewo-template-vars) expr))

(defun ewo-secure-expressionp (expr)
  "Check if EXPR is a secure expression. secure expressions
conform to the following grammar:

<expression> ::= `(' <fun> <expressionlist> `)' |
                 <var> |
                 <constant>

<expressionlist> ::= <expressionlist> <expression> | 

<fun> must be a known function. arity is checked (see function `ewo-secure-callp')

<var> must be a known variable name (see function `ewo-secure-varp')

<constants> are numbers or strings

Return the expression, possibly modified (see function `ewo-secure-callp')
if it is secure, or nil otherwise.
"
  (cond 
   ((listp expr)
    (ewo-secure-callp expr))
   ((numberp expr) 
    expr)
   ((stringp expr) 
    expr)
   ((symbolp expr) 
    (ewo-secure-varp expr))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toc generation system
;;
;; The two stages generation is a real mess, or at least an horrible
;; hack. It highlights the need for a cleaner mechanism, like an
;; extension of the html-export backend.

(defun ewo-html-toc (depth info)
  "Build the toc with the specified DEPTH. INFO is a property
list used as a communication channel."
  (let ((toc-entries 
         (mapcar (lambda (headline)
                   (cons (org-html--format-toc-headline headline info)
                         (org-export-get-relative-level headline info)))
                 (org-export-collect-headlines info depth))))
    (when toc-entries
      ;; à adapter à partir de la version org dans ox-html.el
      (ewo-html--toc-text toc-entries))))

(defun ewo-html--toc-text (toc-entries)
  "Return content of a toc, as a string.  TOC-ENTRIES is an
alist, each element having the form (TITLE . LEVEL), where TITLE
is a string reprensenting an entry title, and LEVEL is an integer
reprenting its relative level."
  (let* ((prev-level (1- (cdar toc-entries)))
	 (start-level prev-level))
    (concat
     (mapconcat
      (lambda (entry)
	(let ((headline (car entry))
	      (level (cdr entry)))
	  (concat
	   (let* ((cnt (- level prev-level))
		  (times (if (> cnt 0) (1- cnt) (- cnt))))
	     (setq prev-level level)
	     (concat
	      (org-html--make-string
	       times (cond ((> cnt 0) "\n<ul>\n<li>")
			   ((< cnt 0) "</li>\n</ul>\n")))
	      (if (> cnt 0) "\n<ul>\n<li>" "</li>\n<li>")))
	   headline)))
      toc-entries "")
     (org-html--make-string (- prev-level start-level) "</li>\n</ul>\n"))))

(defun ewo-toc-content (depth info)
  "Format the innards of the toc. DEPTH is the depth of headers
to include in the toc, info is an alist ised as a communication
channel."
  (let ((toc-entries 
         (mapcar (lambda (headline)
                   (cons (org-html--format-toc-headline headline info)
                         (org-export-get-relative-level headline info)))
                 (org-export-collect-headlines info depth))))
    (when toc-entries
      ;; à adapter à partir de la version org dans ox-html.el
      (ewo-html--toc-text toc-entries))))

(defun ewo-html-toc (depth info)
  "Build the toc. DEPTH is the depth of headers to include in the
toc, info is an alist ised as a communication channel."
  (concat "        <li class=\"dropdown ewo-toc\">
          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">Table des matières <span class=\"caret\"></span></a>
          <ul class=\"dropdown-menu dropdown-menu-right\">"
          (ewo-toc-content depth info)
"</ul>
        </li>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; navbar generation

(defun ewo-html-navbar (info)
  "Build the navigation bar, and optionnally the toc. INFO is a
plist used as a communication channel."
  (let ((name (plist-get info :ewo-cat-name))) ; get the name of the
                                                ; category (nil if we
                                        ; are on the homepage)
;;    (message "navbar config : %s" ewo:current-config)
    (concat 
     "<header>\n"
"  <nav class=\"" ewo-navbar-class "\">
    <div class=\"" ewo-navbar-container "\">
      <div class=\"navbar-header\">
        <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">
          <span class=\"sr-only\">Toggle navigation</span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
        </button>
        <a class=\"navbar-brand\" href=\"" (if name "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") "\">" ewo-name "</a>
      </div>
      <div id=\"navbar\" class=\"navbar-collapse collapse\">
        <ul class=\"" ewo-navbar-ul "\">
          <li" (if (not name) " class=\"active\"" "") "><a href=\"" (if name "<lisp>(ewo-rootlink ewo:catlevel)</lisp>" "./") "\"><span class=\"glyphicon glyphicon-home\" aria-hidden=\"true\"></span> " ewo-home-name "</a></li>\n" 
	  (ewo-categories-nav name ewo:categories)
          (let ((depth (plist-get info :with-toc)))
            (when depth (ewo-html-toc depth info)))
          (unless (avl-tree-empty ewo:tags)
            (ewo:tag-nav name))
"       </ul>
      </div> <!-- navbar-collapse -->
    </div> <!-- container-fluid -->
  </nav>
</header>")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Filters
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; filter system : allows the execution of lisp formulae included in
;; <lisp></lisp> constructs.
  
(defun ewo-filter-lisp-exec (fstring backend channel)
  "An HTML filter which execute lisp functions included in <lisp>...</lisp> constructs.
Only allowed functions with allowed args are possible, and args
must be in a list of allowed variables.

FSTRING is the string containing the HTML content of a pagen
BACKEND is the name of the publishing backend, and CHANNEL is the
communication channel."
  (when (eq backend 'ewo)
    ;; (message "=========================================== lisp-exec-filter")
    ;; build the environment of the function calls (i.e. variables available to the user in templates
    (let ((ewo:catlevel (ewo-get-level (plist-get channel :input-file)))
          (ewo:catname  (ewo-get-catname channel)))
      (while (string-match "<lisp>\\(.+?\\)</lisp>" fstring nil)
	(let* ((start (match-beginning 1))
	       (end   (match-end 1))
	       (strform (substring fstring start end))
	       (form (car (read-from-string strform))))
;;          (message "string form : %s" strform)
;;          (message "form : %s" form)
          (let ((final-form (ewo-secure-expressionp form)))
;;            (message "final form : %s" final-form)
            (if final-form
                (let* ((fun (list 'lambda ewo-template-vars final-form))
                       (args (mapcar (lambda (v) (symbol-value v)) ewo-template-vars))
                       (result (apply fun args)))
                  (setq fstring (concat
                                 (substring fstring 0 (- start 6)) ; jq avant <lisp>
                                 result
                                 (substring fstring (+ end 7) nil)))) ; on commence après </lisp>
              (error "unsecure or malformed expression : %s" strform)))))))
  fstring)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; filter system : allows the inclusion of blocks based on the type of
;; a category.

(defun ewo-filter-cat-type (fstring backend channel)
  "An HTML filter which conditionnally include blocks, depending
on the type of the category containing the file. It processes
two types of blocks :

\"<ewo-blog></ewo-blog>\" : These blocks are included if we are in a
file from a category of type blog.

\"<ewo-static></ewo-static>\" : These blocks are included if we are
in a file from a category of type static.

FSTRING is the string containing the HTML content of a pagen
BACKEND is the name of the publishing backend, and CHANNEL is the
communication channel."
  (when (not (eq backend 'ewo)) fstring)
  ;; (message "=========================================== cat type-filter")
  (let ((catname (ewo-get-catname channel)))
    (when (null catname) fstring)
    (let ((cattype (plist-get (cdr (assoc-string catname ewo-categories)) :type)))
      (while (string-match "\\(<ewo-blog>\\)\\(\\s-*.*?\\(?:\n.*?\\)*?\\)\\(</ewo-blog>\\)"
                             fstring)
        (let* ((otag-start (match-beginning 1))
               (ctag-end   (match-end 3))
               (content-start (match-beginning 2))
               (content-end   (match-end 2)))
          (setq fstring (concat
                         (substring fstring 0 otag-start)
                         (when (eq cattype 'blog)
                           (substring fstring content-start content-end))
                         (substring fstring ctag-end)))))
      (while (string-match "\\(<ewo-static>\\)\\(\\s-*.*?\\(?:\n.*?\\)*?\\)\\(</ewo-static>\\)"
                           fstring)
        (let* ((otag-start (match-beginning 1))
               (ctag-end   (match-end 3))
               (content-start (match-beginning 2))
               (content-end   (match-end 2)))
          (setq fstring (concat
                         (substring fstring 0 otag-start)
                         (when (eq cattype 'static)
                           (substring fstring content-start content-end))
                         (substring fstring ctag-end)))))))
  fstring)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Header filter

;;; TODO : Modularize this ! Perhaps transform into as a translation function  
(defun ewo-filter-headline (fstring backend channel)
  "Headers and section processing:

- if containing outline div is of class panel : 

  1. surround \"<h[2-5]>\" headers with \"<div
     class=\"panel-header\">\",

  2. add \"class=\"panel-body\"\" to de \"<div
     class=\"outline-text-[2-5]\">\".  Warning ! This processing
     relies on the fact that the section has a property
     \"HTML_CONTAINER_CLASS\" which value is the bootstrap panel
     classes.

- Surround sections with published \"BOOSTRAP_COLUMN\" property
  with a \"<div>\" with the corresponding class (use bootstrap column
  classes, like \"col-md-*\", \"col-sm-*\" ...).

- Prefix sections with published \"BOOTSTRAP_ROW_BEGIN\" property
  with a \"<div class=\"row\">\".

- Suffix sections with published \"BOOTSTRAP_ROW_END\" property
  with a \"<div class=\"row\">\".

The processing of bootstrap row and columns suppose that property
drawer filters are called before headline filters, as the ewo
property drawer filter set flags indicating the presence of
columns and row begin or end.

FSTRING is the string containing the HTML content of a pagen
BACKEND is the name of the publishing backend, and CHANNEL is the
communication channel."
  (when (not (eq backend 'html)) fstring) 
  ;; (message "=========================================== headline-filter")
  (let ((re "^\\(<div.+class=\"outline-[2-5].+panel.+\">[[:space:]]*\n\\)\\(<h[2-5].+>.+</h[2-5]>[[:space:]]*\n\\)\\(\\(.\\|\n\\)+</div>\\)\\(\n*\\)$"))
    (when (string-match re fstring)
      (let ((start-outline-2 (match-beginning 1))
	    (end-outline-2 (match-end 1))
	    (start-h2 (match-beginning 2))
	    (end-h2 (match-end 2))
	    (start-div-body (match-beginning 3))
	    (end-div-body (match-end 3))
	    (start-tail (match-beginning 5))
	    (end-tail (match-end 5)))
	(setq fstring (concat
		       (substring fstring start-outline-2 end-outline-2)
		       "<div class=\"panel-heading\">\n"
		       (let ((h2 (substring fstring start-h2 end-h2)))
			 (if (string-match "^\\(.+class=\".+\\)\\(\".+\\)$" h2)
			     (let ((pre (match-string 1 h2))
				   (post (match-string 2 h2)))
			       (concat pre " panel-title" post))
			   (if (string-match "^\\(<h[2-5].+\\)\\(>.+$\\)" h2) ; should match
			       (let ((pre (match-string 1 h2))
				     (post (match-string 2 h2)))
				 (concat pre " class=\"panel-title\"" post))
			     (substring fstring start-h2 end-h2))))
		       "</div>\n"
		       "<div class=\"panel-body\">\n"
		       (substring fstring start-div-body end-div-body)
		       "\n</div>\n"
		       (substring fstring start-tail nil))))))
  ;; now check if properties regarding bootstrap rows and columns have
  ;; been set. Add divs accordingly. This is soooo weird (because it
  ;; relies on filter application order)....

  (when ewo-bootstrap-column
    (setq fstring (concat
		   "<div class=\"" ewo-bootstrap-column "\">\n"
		   fstring
		   "</div> <!-- bootstrap column -->\n"))
    (setq ewo-bootstrap-column nil))
  (when ewo-bootstrap-row-begin
    (setq fstring (concat 
		   "<div class=\"row\">\n"
		   fstring))
    (setq ewo-bootstrap-row-begin nil))
  (when ewo-bootstrap-row-end
    (setq fstring (concat 
		   fstring
		   "</div>\n"))
    (setq ewo-bootstrap-row-end nil))
  
  fstring)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drawer filter

(defvar ewo-bootstrap-column nil
"non nil indicates that current section should be embeded into a
column.")
(defvar ewo-bootstrap-row-begin nil
"Non nil means that the current section shoud start a new row")
(defvar ewo-bootstrap-row-end nil
"Non nil means that the current section shoud end a new row")

;; careful : relies on the fact that this filter will be applied before
;; headline filter  (`ewo-filter-headline').
(defun ewo-filter-drawer (fstring backend channel)
  "Extract information from \"BOOTSTRAP_COLUMN\", \"BOOTSTRAP_ROW_BEGIN\"
and \"BOOTSTRAP_ROW_END\" properties. This information will be used
by the headline filter `ewo-filter-headline'.

FSTRING is the string containing the HTML content of a pagen
BACKEND is the name of the publishing backend, and CHANNEL is the
communication channel."
  (when (not (eq backend 'html)) nil)
  ;; (message "=========================================== drawer-filter")
  (when (string-match "^BOOTSTRAP_COLUMN:[[:space:]]+\\(.+\\)[[:space:]]*$" fstring)
    (setq ewo-bootstrap-column (match-string 1 fstring)))
  (when (string-match "^BOOTSTRAP_ROW_BEGIN:[[:space:]]+.+[[:space:]]*$" fstring)
    (setq ewo-bootstrap-row-begin t))
  (when (string-match "^BOOTSTRAP_ROW_END:[[:space:]]+.+[[:space:]]*$" fstring)
    (setq ewo-bootstrap-row-end t))
  "\n")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; link filter

(defun ewo-filter-link (fstring backend channel)
  "Apply transformations to HTML links. The transformations are
performed according to the value of the variables
`ewo-ext-link-addition-type', `ewo-ext-link-addition',
`ewo-int-link-addition-type' and `ewo-int-link-addition'.

FSTRING is the string containing the HTML content of a pagen
BACKEND is the name of the publishing backend, and CHANNEL is the
communication channel."
  (when (not (eq backend 'html)) nil)
  ;; (message "=========================================== link-filter")
  (if (string-match "href=\"[a-z]+://" fstring)
      ;; external link
      (cond ((eq ewo-ext-link-addition-type 'anchor) 
	     (when (and ewo-ext-link-addition (string-match "^<a +\\(href.+\\)$" fstring))
	       (setq fstring (concat "<a class=\"" 
				     ewo-ext-link-addition "\" " 
				     (match-string 1 fstring)))))
	    ((eq ewo-ext-link-addition-type 'span) 
	     (when (and ewo-ext-link-addition (string-match "^\\(<a[^>]+>[^>]+\\)</a>$" fstring))
	       (setq fstring (concat (match-string 1 fstring) 
				     " <span class=\"" ewo-ext-link-addition "\"></span></a>")))))
    ;; internal link
    (cond ((eq ewo-int-link-addition-type 'anchor) 
	   (when (and ewo-int-link-addition (string-match "^<a +\\(href.+\\)$" fstring))
	     (setq fstring (concat "<a class=\"" 
				   ewo-int-link-addition "\" " 
				   (match-string 1 fstring)))))
	  ((eq ewo-int-link-addition-type 'span) 
	   (when (and ewo-ext-link-addition (string-match "^\\(<a[^>]+>[^>]+\\)</a>$" fstring))
	     (setq fstring (concat (match-string 1 fstring) 
				   " <span class=\"" ewo-int-link-addition "\"></span></a>"))))))
  fstring)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Blog publishing functions
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ewo-prepare-blog-index (props)
  "Prepares the global list of blog articles. PROPS is the
property list containing the pubishing configuration."
  (let ((dir (plist-get props :base-directory)))
    (ewo:gen-blog-index dir)))


(defun ewo-prepare-tag-files (props)
  "Generate the tags.org file and the index files for each tag
from the `ewo:tags' tree.

PROPS is the property list containing the publishing
configuration."
  (ewo:clean-tag-files)
  (let* ((filename (expand-file-name "tags.org" ewo-root-dir))
         (visiting (find-buffer-visiting filename))
         (buffer (or visiting (find-file-noselect filename))))
    (unwind-protect
        (with-current-buffer buffer
          (erase-buffer)
          (ewo:tagfile-header)
          (ewo:tagfile-content)
          (save-buffer))
      (unless visiting (kill-buffer)))))

;;; preparation functions for blog indexing

(defun ewo:init-cat-index (props cat)
  (setq ewo:blog-category-article-list '()))

(defun ewo:process-cat-index (props cat fname)
  (let ((state (ewo:read-org-option "EWO_STATE")))
    (when (string= state "published")
      (let* ((date    (ewo:get-buffer-date))
	     (title   (ewo:get-buffer-title))
	     (id      (ewo:get-buffer-id))
	     (excerpt (ewo:get-buffer-excerpt)))
	(ewo:add-to-article-lists id date title excerpt fname)))))

;;; preparation functions for tags

(defun ewo:process-tags (props cat fname)
  "Collect org \"FILETAGS\" keyword content in file, and add it
to the global collection. see variable `ewo:tags' for the
structure of the collection."
  (let ((tags-raw (ewo:read-org-option "FILETAGS"))
	(title    (ewo:read-org-option "TITLE"))
	(pub      (ewo:read-org-option "EWO_STATE")))
    (unless (or (null tags-raw) (null pub) (not (string= "published" pub)))
      (nlet loop ((tags (split-string tags-raw ":" t)))
	(unless (null tags)
	  (ewo:add-to-tag-map
	   (car tags) title
	   (file-relative-name fname ewo-root-dir))
	  (loop (cdr tags)))))))


;;; unified preparation system

(defvar ewo:prepare-funcs
  '(("index"
     :pre ewo:init-cat-index
     :process ewo:process-cat-index
     :post ewo:blog-gen-cat-index)
    ("tags"
     :pre nil
     :process ewo:process-tags
     :post nil))
  "preparation functions, called becore the publication of a
category. This is a list of lists. Each element of the list is a
property list prefixed by a string id (unused for now). The
property list has the following properties:

:pre a function called before the loop on each file

:process a function called on each file in the category, except
the index. This function should operate on the current buffer
! (which is unwind-protected) which contains the current blog
article.

:post a function called after the loop on each file

The :pre function has two arguments (prefunc PROPS CAT): a PROPS
list for the category, and the CAT name.

The :process function has four arguments (processfunc PROPS CAT
NAME) : a PROPS list for the category, the CAT name, and the NAME
of the processed file.

The :post function has for arguments (postfunc DIR CAT): DIR is
the directory of the category, and CAT is the category name.")

(defun ewo:prepare-pre (props cat)
  "Call the preprocessing preparation functions. PROPS is the
property list of the category, CAT is the category name."
  (dolist (e ewo:prepare-funcs)
    (let ((fun (plist-get (cdr e) :pre)))
      (when fun
	(funcall fun props cat)))))

(defun ewo:prepare-process (props cat fname)
  "Call the preparation functions. PROPS is the property list of
the category, CAT is the category name. BUFFER is the buffer of
the processed file and FNAME is the name of the file."
  (dolist (e ewo:prepare-funcs)
    (let ((fun (plist-get (cdr e) :process)))
      (when fun
	(funcall fun props cat fname)))))

(defun ewo:prepare-post (dir cat)
  "Call the postprocessing preparation functions. DIR is the
directory of the category, CAT is the category name."
  (dolist (e ewo:prepare-funcs)
    (let ((fun (plist-get (cdr e) :post)))
      (when fun
	(funcall fun dir cat)))))


(defun ewo-prepare (props)
  "Call various preparation tasks on articles in blog
categories. This avoids multiple visiting/closing of the same
files.

PROPS is the property list containing the pubishing
configuration."
  (let ((cat (plist-get props :ewo-cat-name)))
    (let ((flist (org-publish-get-base-files (cons cat props)))
	  (dir   (plist-get props :base-directory)))
      (ewo:prepare-pre props cat)
      (dolist (file flist)
        (when (not (ewo:category-indexp file (plist-get props :base-directory)))
        (when (not (ewo:category-indexp file (plist-get props :base-directory)))
          (let* ((visiting (find-buffer-visiting file))
                 (buffer   (or visiting (find-file-noselect file))))
            (unwind-protect
                (with-current-buffer buffer
		  (ewo:prepare-process props cat file)
                  (save-buffer))
              (unless visiting (kill-buffer buffer)))))) 
      ;; generate category index
      (ewo:prepare-post dir cat)))))
	  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Main translation funtions  
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ewo-html-inner-template (contents info)
  "Return body of document string after HTML conversion.
CONTENTS is the transcoded contents string.  INFO is a plist used
as a communication channel.

This template differs from the original `org-html-inner-template'
in the navigation bar generation. Instead of generation only
simple table of content as the org html exporter does, it
generates the navigation bar (among categories and tags), and a
toc."
  (concat
   (ewo-html-navbar info)
   ;; Document contents.
   contents
   ;; Footnotes section.
   (org-html-footnote-section info)))

(defun ewo-html-template (contents info)
  "Return complete document string after HTML conversion.
CONTENTS is the transcoded contents string.  INFO is a plist
holding export options.

Largely borrowed from org-html-template. The only difference is
the addition of the <div> surrounding all the body."
  (concat
   (when (and (not (org-html-html5-p info)) (org-html-xhtml-p info))
     (let* ((xml-declaration (plist-get info :html-xml-declaration))
	    (decl (or (and (stringp xml-declaration) xml-declaration)
		      (cdr (assoc (plist-get info :html-extension)
				  xml-declaration))
		      (cdr (assoc "html" xml-declaration))
		      "")))
       (when (not (or (not decl) (string= "" decl)))
	 (format "%s\n"
		 (format decl
			 (or (and org-html-coding-system
				  (fboundp 'coding-system-get)
				  (coding-system-get org-html-coding-system 'mime-charset))
			     "iso-8859-1"))))))
   (org-html-doctype info)
   "\n"
   (concat "<html"
	   (cond ((org-html-xhtml-p info)
		  (format
		   " xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"%s\" xml:lang=\"%s\""
		   (plist-get info :language) (plist-get info :language)))
		 ((org-html-html5-p info)
		  (format " lang=\"%s\"" (plist-get info :language))))
	   ">\n")
   "<head>\n"
   (org-html--build-meta-info info)
   (org-html--build-head info)
   (org-html--build-mathjax-config info)
   "</head>\n"
   "<body>\n<div class=\"container\">\n"
   (let ((link-up (org-trim (plist-get info :html-link-up)))
	 (link-home (org-trim (plist-get info :html-link-home))))
     (unless (and (string= link-up "") (string= link-home ""))
       (format (plist-get info :html-home/up-format)
	       (or link-up link-home)
	       (or link-home link-up))))
   ;; Preamble.
   (org-html--build-pre/postamble 'preamble info)
   ;; Document contents.
   (let ((div (assq 'content (plist-get info :html-divs))))
     (format "<%s id=\"%s\">\n" (nth 1 div) (nth 2 div)))
   ;; Document title.
   (when (plist-get info :with-title)
     (let ((title (plist-get info :title))
	   (subtitle (plist-get info :subtitle))
	   (html5-fancy (org-html--html5-fancy-p info)))
       (when title
	 (format
	  (if html5-fancy
	      "<header>\n<h1 class=\"title\">%s</h1>\n%s</header>"
	    "<h1 class=\"title\">%s%s</h1>\n")
	  (org-export-data title info)
	  (if subtitle
	      (format
	       (if html5-fancy
		   "<p class=\"subtitle\">%s</p>\n"
		 "\n<br>\n<span class=\"subtitle\">%s</span>\n")
	       (org-export-data subtitle info))
	    "")))))
   contents
   (format "</%s>\n" (nth 1 (assq 'content (plist-get info :html-divs))))
   ;; Postamble.
   (org-html--build-pre/postamble 'postamble info)
   ;; Closing <div class="container">
   "</div> <!-- class container -->\n"
   ;; Closing document.
   "</body>\n</html>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Backend definition and interactive functions
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; defines the backend.
;;
;; From now on, navigation bar is generated by the inner-template
;; generator, not by the preamble. The preamble will be totally deactivated.

(org-export-define-derived-backend 'ewo 'html
  :translate-alist '(;(headline . ewo-html-headline-translator)
                     (inner-template . ewo-html-inner-template)
                     (template . ewo-html-template))
  :filters-alist '((:filter-link . ewo-filter-link)
                   (:filter-property-drawer . ewo-filter-drawer)
                   (:filter-headline . ewo-filter-headline)
                   (:filter-final-output . (ewo-filter-cat-type ewo-filter-lisp-exec))))

;;;###autoload
(defun ewo-html-publish-to-html (plist filename pub-dir)
  "Publish an org file to HTML using ewo backend.

FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.

Return output file name."
  (org-publish-org-to 'ewo filename
		      (concat "." (or (plist-get plist :html-extension)
				      org-html-extension
				      "html"))
		      plist pub-dir))

;; main entry point ! 
;;;###autoload
(defun ewo-publish (config)
  "Publish the specified website. Config is a configuration id."
  (interactive
   (list (let ((default (if (null ewo:conf-history)
                            (car (car ewo-configurations))
                          (car ewo:conf-history))))
           (completing-read (format "Config to publish (%s) [default: %s]: "
                                    (mapconcat #'(lambda (var) (car var))
                                               ewo-configurations "/")
                                    default)
                            (mapcar #'(lambda (var) (car var)) ewo-configurations)
                            nil t nil 'ewo:conf-history default))))
                                        ; reset global blog article list
  (setq ewo:blog-global-article-list '())
                                        ; clear tag tree
  (avl-tree-clear ewo:tags)
  (setq ewo:current-config (cdr (assoc config ewo-configurations)))
  (ewo:build-internal-categories)
  (let ((config-props ewo:current-config))
    (if config-props
        (save-excursion
          (let* ((root-dir ewo-root-dir)
                 (publish-dir (plist-get config-props :publish-dir)))
            (if (and root-dir publish-dir)
                (progn
                  (message "Publishing ewo config %s, root dir %s, publishing dir %s"
                           config root-dir publish-dir)
                  (ewo-gen-project-alist root-dir publish-dir)
                  (org-publish "website")
                  (message "ewo publishing complete"))
              (error "bad ewo config"))))
      (error "ewo config not found")))
  (setq ewo:current-config nil)
  (avl-tree-clear ewo:tags)
  (setq ewo:blog-global-article-list '()))


(provide 'ox-ewo)

;;; ox-ewo.el ends here

