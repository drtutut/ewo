;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; My blog project
;;;
;;; Generates a site organized in categories. Relies on the bootstrap
;;; framework by default but this can be customized.
;;;
;;; There is only one category level.
;;; There are two kinds of categories :
;;;
;;; static categories
;;; -----------------
;;;
;;; the category correspond to one page (index.org) in the category
;;; directory. The content of this page is entirely user-defined. The
;;; blogging system only task is to generate navigation links.
;;;
;;; In order to create a static category, set the `:type' attribute to
;;; `static'.
;;;
;;; blogging categories
;;; -------------------
;;;
;;; The category correspond to one page (`index.org') in the category
;;; directory. The resulting `index.html' page is automagically
;;; generated by the system. It present the various articles published
;;; in the category. Several sorting options are considered : by date
;;; ou by tag.  Each article is a section in the `index.org' file. An
;;; article is generated if the section is a `DONE' entry (that is,
;;; `TODO' entries are articles in a writing process). data associated
;;; to a blog entry which is taken into account by the system is :
;;; 
;;; - The CLOSED property, which is used as the publication date
;;; - tags : are collected in order to propose a tag cloud.
;;; 
;;; In order to create a blogging category, set the `:type' attribute
;;; to `blog'.
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar eric-website-name "Retry/Abort")
(defvar eric-website-root-dir "~/Documents/www/MonSite/org")
(defvar eric-website-publish-dir "~/public_html")
(defvar eric-website-categories
  `(("enseignement"
     :label "Enseignement"
     :directory "Enseignement"
     :type static)
    ("recherche"
     :label "Recherche"
     :directory "Recherche"
     :type static)))	       

(defun eric-website-cat-names (cats)
  "Liste des noms de catégories"
  (if (not (consp cats))
      '()
    (cons (car (car cats))
	  (eric-website-cat-names (cdr cats)))))


    
    


;; entête de page de l'accueil
(defvar eric-website-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->"
"entête de la page d'accueil")

;; entête de page des catégories
(defvar eric-website-cat-html-head "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>
<link rel=\"stylesheet\" href=\"../css/bootstrap.min.css\" type=\"text/css\"/>
<link rel=\"stylesheet\" href=\"../css/mystyle.css\" type=\"text/css\"/>
<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>
  <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>
<![endif]-->"
"entête des pages des catégories")

;; Builds the navigation links to the categories. `catlist' is the
;; list of categories, `catname' is the name of the current category,
;; or `nil' if we are at site home. 
(defun eric-website-categories-nav (curcat catlist)
  (if (not (consp catlist))
      '()
    (let ((catname 	(car (car catlist)))
	  (pl 		(cdr (car catlist))))
      (concat
       (make-string 10 ?\s)
       "<li" 
       (if (string-equal curcat catname)
	   " class=\"active\"" "")
       "><a href=\"" 
       (if curcat "../" "./") 
       (plist-get pl :directory) "\">" (plist-get pl :label) "</a></li>\n"
       (eric-website-categories-nav curcat (cdr catlist))))))

(defun eric-website-genlink-up (level)
  " Generates an up link to root depending on LEVEL"
  (if (= level 0)
      ""
    (concat "../" (eric-website-genlink-up (- level 1)))))

;; Builds the navigation)
;; if `iscategory' is true, it means that we are in a category page,
;; otherwise we are at the root of the website. `catname' is the category name
(defun eric-website-html-nav (catname)
  (concat 
   "<header>
  <nav class=\"navbar navbar-inverse navbar-fixed-top\">
    <div class=\"container\">
      <div class=\"navbar-header\">
        <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">
          <span class=\"sr-only\">Toggle navigation</span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
          <span class=\"icon-bar\"></span>
        </button>
        <a class=\"navbar-brand\" href=\"" (if catname "../" "./") "\">Retry/Abort</a>
      </div>
      <div id=\"navbar\" class=\"navbar-collapse collapse\">
        <ul class=\"nav navbar-nav\">
          <li" (if (not catname) " class=\"active\"" "") "><a href=\"" (if catname "../" "./") "\">Accueil</a></li>\n" 
	  (eric-website-categories-nav catname eric-website-categories)
"        </ul>
      </div> <!-- navbar-collapse -->
    </div> <!-- container-fluid -->
  </nav>
</header>"))

(defvar eric-website-html-postamble 
  "<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src=\"js/bootstrap.min.js\"></script>")

;; génère les propriétés de publication d'une catégorie
(defun eric-website-cat-props (cat)
  (let* ((name  (car cat))
	 (props (cdr cat))
	 (label (plist-get props :label))
	 (dir   (plist-get props :directory)))
    (list
     name
     :base-directory (concat eric-website-root-dir "/" dir)
     :base-extension "org"
     :publishing-directory (concat eric-website-publish-dir "/" dir)
     :publishing-function 'org-html-publish-to-html
     :headline-levels 3
     :style-include-default: nil
     :section-numbers nil
     :table-of-contents nil
     :html-head eric-website-cat-html-head
     :html-preamble (eric-website-html-nav name)
     :html-postamble eric-website-html-postamble)))


		

;; génère la liste de publication du projet pour les catégories 
(defun eric-website-cat-project-alist (catlist)
  (if (not (consp catlist))
      '()
    (cons
     (eric-website-cat-props (car catlist))
     (eric-website-cat-project-alist (cdr catlist)))))
  

(setq org-publish-project-alist
      (append
       (list
	(list
	 "orgfiles"
	 :base-directory eric-website-root-dir
	 :base-extension "org"
	 :publishing-directory eric-website-publish-dir
	 :publishing-function 'org-html-publish-to-html
	 :headline-levels 3
	 :style-include-default: nil
	 :section-numbers nil
	 :table-of-contents nil
	 :html-head eric-website-html-head
	 :html-preamble (eric-website-html-nav nil)
	 :html-postamble eric-website-html-postamble))
       (eric-website-cat-project-alist eric-website-categories)
       (list
	(list
	 "images"
	 :base-directory (concat eric-website-root-dir "/images")
	 :base-extension "jpg\\|gif\\|png"
	 :publishing-directory (concat eric-website-publish-dir "/images")
	 :publishing-function 'org-publish-attachment)
	
	(list 
	 "css"
	 :base-directory (concat eric-website-root-dir "/css")
	 :base-extension "css\\|map"
	 :publishing-directory (concat eric-website-publish-dir "/css")
	 :publishing-function 'org-publish-attachment)
	
	(list
	 "js"
	 :base-directory (concat eric-website-root-dir "/js")
	 :base-extension "js"
	 :publishing-directory (concat eric-website-publish-dir "/js")
	 :publishing-function 'org-publish-attachment)
	
	(list
	 "fonts"
	 :base-directory (concat eric-website-root-dir "/fonts")
	 :base-extension "woff2\\|woff\\|ttf\\|svg\\|eot"
	 :publishing-directory (concat eric-website-publish-dir "/fonts")
	 :publishing-function 'org-publish-attachment)
	`("website" :components ,(append 
				  '("orgfiles" "images" "css" "js" "fonts")
				  (eric-website-cat-names eric-website-categories))))))
	  

;; TODO: filtre enlevant les blocs <div> des pre/postambles
(defun eric-website-filter-prepost (fstring backend channel)
  (print ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
  (print backend)
  (print channel)
  (print "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
)

;;  Enregistrer la fonction filtre
(setq org-export-filter-final-output-functions
      '(eric-website-filter-prepost))
